// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Thu, 22 Sep 2016 01:34:53 MSK.
// By https://git.io/cgogen. DO NOT EDIT.

package nk

/*
#cgo CFLAGS: -DNK_INCLUDE_FIXED_TYPES=1
#include "nuklear.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// NkInitFixed function as declared in nk/nuklear.h:655
func NkInitFixed(arg0 []Context, memory unsafe.Pointer, size Size, arg3 []UserFont) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cmemory, _ := (unsafe.Pointer)(unsafe.Pointer(memory)), cgoAllocsUnknown
	csize, _ := (C.nk_size)(size), cgoAllocsUnknown
	carg3, _ := unpackArgSUserFont(arg3)
	__ret := C.nk_init_fixed(carg0, cmemory, csize, carg3)
	packSUserFont(arg3, carg3)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInitCustom function as declared in nk/nuklear.h:656
func NkInitCustom(arg0 []Context, cmds []Buffer, pool []Buffer, arg3 []UserFont) int32 {
	carg0, _ := unpackArgSContext(arg0)
	ccmds, _ := unpackArgSBuffer(cmds)
	cpool, _ := unpackArgSBuffer(pool)
	carg3, _ := unpackArgSUserFont(arg3)
	__ret := C.nk_init_custom(carg0, ccmds, cpool, carg3)
	packSUserFont(arg3, carg3)
	packSBuffer(pool, cpool)
	packSBuffer(cmds, ccmds)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInit function as declared in nk/nuklear.h:657
func NkInit(arg0 []Context, arg1 []Allocator, arg2 []UserFont) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (*C.struct_nk_allocator)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	carg2, _ := unpackArgSUserFont(arg2)
	__ret := C.nk_init(carg0, carg1, carg2)
	packSUserFont(arg2, carg2)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkClear function as declared in nk/nuklear.h:658
func NkClear(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_clear(carg0)
	packSContext(arg0, carg0)
}

// NkFree function as declared in nk/nuklear.h:659
func NkFree(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_free(carg0)
	packSContext(arg0, carg0)
}

// NkBegin function as declared in nk/nuklear.h:665
func NkBegin(arg0 []Context, arg1 []Panel, title string, bounds Rect, flags Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	ctitle, _ := unpackPCharString(title)
	cbounds, _ := bounds.PassValue()
	cflags, _ := (C.nk_flags)(flags), cgoAllocsUnknown
	__ret := C.nk_begin(carg0, carg1, ctitle, cbounds, cflags)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkBeginTitled function as declared in nk/nuklear.h:666
func NkBeginTitled(arg0 []Context, arg1 []Panel, name string, title string, bounds Rect, flags Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cname, _ := unpackPCharString(name)
	ctitle, _ := unpackPCharString(title)
	cbounds, _ := bounds.PassValue()
	cflags, _ := (C.nk_flags)(flags), cgoAllocsUnknown
	__ret := C.nk_begin_titled(carg0, carg1, cname, ctitle, cbounds, cflags)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkEnd function as declared in nk/nuklear.h:667
func NkEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_end(carg0)
	packSContext(arg0, carg0)
}

// NkWindowFind function as declared in nk/nuklear.h:669
func NkWindowFind(ctx []Context, name string) *Window {
	cctx, _ := unpackArgSContext(ctx)
	cname, _ := unpackPCharString(name)
	__ret := C.nk_window_find(cctx, cname)
	packSContext(ctx, cctx)
	__v := NewWindowRef(unsafe.Pointer(__ret))
	return __v
}

// NkWindowGetBounds function as declared in nk/nuklear.h:670
func NkWindowGetBounds(arg0 []Context) Rect {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_bounds(carg0)
	packSContext(arg0, carg0)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetPosition function as declared in nk/nuklear.h:671
func NkWindowGetPosition(arg0 []Context) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_position(carg0)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetSize function as declared in nk/nuklear.h:672
func NkWindowGetSize(arg0 []Context) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_size(carg0)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetWidth function as declared in nk/nuklear.h:673
func NkWindowGetWidth(arg0 []Context) float32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_width(carg0)
	packSContext(arg0, carg0)
	__v := (float32)(__ret)
	return __v
}

// NkWindowGetHeight function as declared in nk/nuklear.h:674
func NkWindowGetHeight(arg0 []Context) float32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_height(carg0)
	packSContext(arg0, carg0)
	__v := (float32)(__ret)
	return __v
}

// NkWindowGetPanel function as declared in nk/nuklear.h:675
func NkWindowGetPanel(arg0 []Context) *Panel {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_panel(carg0)
	packSContext(arg0, carg0)
	__v := NewPanelRef(unsafe.Pointer(__ret))
	return __v
}

// NkWindowGetContentRegion function as declared in nk/nuklear.h:676
func NkWindowGetContentRegion(arg0 []Context) Rect {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_content_region(carg0)
	packSContext(arg0, carg0)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetContentRegionMin function as declared in nk/nuklear.h:677
func NkWindowGetContentRegionMin(arg0 []Context) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_content_region_min(carg0)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetContentRegionMax function as declared in nk/nuklear.h:678
func NkWindowGetContentRegionMax(arg0 []Context) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_content_region_max(carg0)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetContentRegionSize function as declared in nk/nuklear.h:679
func NkWindowGetContentRegionSize(arg0 []Context) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_content_region_size(carg0)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetCanvas function as declared in nk/nuklear.h:680
func NkWindowGetCanvas(arg0 []Context) *CommandBuffer {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_get_canvas(carg0)
	packSContext(arg0, carg0)
	__v := NewCommandBufferRef(unsafe.Pointer(__ret))
	return __v
}

// NkWindowHasFocus function as declared in nk/nuklear.h:682
func NkWindowHasFocus(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_has_focus(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWindowIsCollapsed function as declared in nk/nuklear.h:683
func NkWindowIsCollapsed(arg0 []Context, arg1 string) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	__ret := C.nk_window_is_collapsed(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWindowIsClosed function as declared in nk/nuklear.h:684
func NkWindowIsClosed(arg0 []Context, arg1 string) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	__ret := C.nk_window_is_closed(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWindowIsHidden function as declared in nk/nuklear.h:685
func NkWindowIsHidden(arg0 []Context, arg1 string) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	__ret := C.nk_window_is_hidden(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWindowIsActive function as declared in nk/nuklear.h:686
func NkWindowIsActive(arg0 []Context, arg1 string) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	__ret := C.nk_window_is_active(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWindowIsHovered function as declared in nk/nuklear.h:687
func NkWindowIsHovered(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_is_hovered(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWindowIsAnyHovered function as declared in nk/nuklear.h:688
func NkWindowIsAnyHovered(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_window_is_any_hovered(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkItemIsAnyActive function as declared in nk/nuklear.h:689
func NkItemIsAnyActive(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_item_is_any_active(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWindowSetBounds function as declared in nk/nuklear.h:691
func NkWindowSetBounds(arg0 []Context, arg1 Rect) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	C.nk_window_set_bounds(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkWindowSetPosition function as declared in nk/nuklear.h:692
func NkWindowSetPosition(arg0 []Context, arg1 Vec2) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	C.nk_window_set_position(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkWindowSetSize function as declared in nk/nuklear.h:693
func NkWindowSetSize(arg0 []Context, arg1 Vec2) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	C.nk_window_set_size(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkWindowSetFocus function as declared in nk/nuklear.h:694
func NkWindowSetFocus(arg0 []Context, name string) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	C.nk_window_set_focus(carg0, cname)
	packSContext(arg0, carg0)
}

// NkWindowClose function as declared in nk/nuklear.h:696
func NkWindowClose(ctx []Context, name string) {
	cctx, _ := unpackArgSContext(ctx)
	cname, _ := unpackPCharString(name)
	C.nk_window_close(cctx, cname)
	packSContext(ctx, cctx)
}

// NkWindowCollapse function as declared in nk/nuklear.h:697
func NkWindowCollapse(arg0 []Context, name string, arg2 CollapseStates) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	carg2, _ := (C.enum_nk_collapse_states)(arg2), cgoAllocsUnknown
	C.nk_window_collapse(carg0, cname, carg2)
	packSContext(arg0, carg0)
}

// NkWindowCollapseIf function as declared in nk/nuklear.h:698
func NkWindowCollapseIf(arg0 []Context, name string, arg2 CollapseStates, cond int32) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	carg2, _ := (C.enum_nk_collapse_states)(arg2), cgoAllocsUnknown
	ccond, _ := (C.int)(cond), cgoAllocsUnknown
	C.nk_window_collapse_if(carg0, cname, carg2, ccond)
	packSContext(arg0, carg0)
}

// NkWindowShow function as declared in nk/nuklear.h:699
func NkWindowShow(arg0 []Context, name string, arg2 ShowStates) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	carg2, _ := (C.enum_nk_show_states)(arg2), cgoAllocsUnknown
	C.nk_window_show(carg0, cname, carg2)
	packSContext(arg0, carg0)
}

// NkWindowShowIf function as declared in nk/nuklear.h:700
func NkWindowShowIf(arg0 []Context, name string, arg2 ShowStates, cond int32) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	carg2, _ := (C.enum_nk_show_states)(arg2), cgoAllocsUnknown
	ccond, _ := (C.int)(cond), cgoAllocsUnknown
	C.nk_window_show_if(carg0, cname, carg2, ccond)
	packSContext(arg0, carg0)
}

// NkLayoutRowDynamic function as declared in nk/nuklear.h:703
func NkLayoutRowDynamic(arg0 []Context, height float32, cols int32) {
	carg0, _ := unpackArgSContext(arg0)
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	ccols, _ := (C.int)(cols), cgoAllocsUnknown
	C.nk_layout_row_dynamic(carg0, cheight, ccols)
	packSContext(arg0, carg0)
}

// NkLayoutRowStatic function as declared in nk/nuklear.h:704
func NkLayoutRowStatic(arg0 []Context, height float32, itemWidth int32, cols int32) {
	carg0, _ := unpackArgSContext(arg0)
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	citemWidth, _ := (C.int)(itemWidth), cgoAllocsUnknown
	ccols, _ := (C.int)(cols), cgoAllocsUnknown
	C.nk_layout_row_static(carg0, cheight, citemWidth, ccols)
	packSContext(arg0, carg0)
}

// NkLayoutRowBegin function as declared in nk/nuklear.h:706
func NkLayoutRowBegin(arg0 []Context, arg1 LayoutFormat, rowHeight float32, cols int32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_layout_format)(arg1), cgoAllocsUnknown
	crowHeight, _ := (C.float)(rowHeight), cgoAllocsUnknown
	ccols, _ := (C.int)(cols), cgoAllocsUnknown
	C.nk_layout_row_begin(carg0, carg1, crowHeight, ccols)
	packSContext(arg0, carg0)
}

// NkLayoutRowPush function as declared in nk/nuklear.h:707
func NkLayoutRowPush(arg0 []Context, value float32) {
	carg0, _ := unpackArgSContext(arg0)
	cvalue, _ := (C.float)(value), cgoAllocsUnknown
	C.nk_layout_row_push(carg0, cvalue)
	packSContext(arg0, carg0)
}

// NkLayoutRowEnd function as declared in nk/nuklear.h:708
func NkLayoutRowEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_layout_row_end(carg0)
	packSContext(arg0, carg0)
}

// NkLayoutRow function as declared in nk/nuklear.h:709
func NkLayoutRow(arg0 []Context, arg1 LayoutFormat, height float32, cols int32, ratio []float32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_layout_format)(arg1), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	ccols, _ := (C.int)(cols), cgoAllocsUnknown
	cratio, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ratio)).Data)), cgoAllocsUnknown
	C.nk_layout_row(carg0, carg1, cheight, ccols, cratio)
	packSContext(arg0, carg0)
}

// NkLayoutSpaceBegin function as declared in nk/nuklear.h:711
func NkLayoutSpaceBegin(arg0 []Context, arg1 LayoutFormat, height float32, widgetCount int32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_layout_format)(arg1), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	cwidgetCount, _ := (C.int)(widgetCount), cgoAllocsUnknown
	C.nk_layout_space_begin(carg0, carg1, cheight, cwidgetCount)
	packSContext(arg0, carg0)
}

// NkLayoutSpacePush function as declared in nk/nuklear.h:712
func NkLayoutSpacePush(arg0 []Context, arg1 Rect) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	C.nk_layout_space_push(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkLayoutSpaceEnd function as declared in nk/nuklear.h:713
func NkLayoutSpaceEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_layout_space_end(carg0)
	packSContext(arg0, carg0)
}

// NkLayoutSpaceBounds function as declared in nk/nuklear.h:715
func NkLayoutSpaceBounds(arg0 []Context) Rect {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_layout_space_bounds(carg0)
	packSContext(arg0, carg0)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceToScreen function as declared in nk/nuklear.h:716
func NkLayoutSpaceToScreen(arg0 []Context, arg1 Vec2) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_layout_space_to_screen(carg0, carg1)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceToLocal function as declared in nk/nuklear.h:717
func NkLayoutSpaceToLocal(arg0 []Context, arg1 Vec2) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_layout_space_to_local(carg0, carg1)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceRectToScreen function as declared in nk/nuklear.h:718
func NkLayoutSpaceRectToScreen(arg0 []Context, arg1 Rect) Rect {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_layout_space_rect_to_screen(carg0, carg1)
	packSContext(arg0, carg0)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceRectToLocal function as declared in nk/nuklear.h:719
func NkLayoutSpaceRectToLocal(arg0 []Context, arg1 Rect) Rect {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_layout_space_rect_to_local(carg0, carg1)
	packSContext(arg0, carg0)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutRatioFromPixel function as declared in nk/nuklear.h:720
func NkLayoutRatioFromPixel(arg0 []Context, pixelWidth float32) float32 {
	carg0, _ := unpackArgSContext(arg0)
	cpixelWidth, _ := (C.float)(pixelWidth), cgoAllocsUnknown
	__ret := C.nk_layout_ratio_from_pixel(carg0, cpixelWidth)
	packSContext(arg0, carg0)
	__v := (float32)(__ret)
	return __v
}

// NkGroupBegin function as declared in nk/nuklear.h:723
func NkGroupBegin(arg0 []Context, arg1 []Panel, title string, arg3 Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	ctitle, _ := unpackPCharString(title)
	carg3, _ := (C.nk_flags)(arg3), cgoAllocsUnknown
	__ret := C.nk_group_begin(carg0, carg1, ctitle, carg3)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkGroupEnd function as declared in nk/nuklear.h:724
func NkGroupEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_group_end(carg0)
	packSContext(arg0, carg0)
}

// NkTreePushHashed function as declared in nk/nuklear.h:729
func NkTreePushHashed(arg0 []Context, arg1 TreeType, title string, initialState CollapseStates, hash string, len int32, seed int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_tree_type)(arg1), cgoAllocsUnknown
	ctitle, _ := unpackPCharString(title)
	cinitialState, _ := (C.enum_nk_collapse_states)(initialState), cgoAllocsUnknown
	chash, _ := unpackPCharString(hash)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	cseed, _ := (C.int)(seed), cgoAllocsUnknown
	__ret := C.nk_tree_push_hashed(carg0, carg1, ctitle, cinitialState, chash, clen, cseed)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkTreeImagePushHashed function as declared in nk/nuklear.h:732
func NkTreeImagePushHashed(arg0 []Context, arg1 TreeType, arg2 Image, title string, initialState CollapseStates, hash string, len int32, seed int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_tree_type)(arg1), cgoAllocsUnknown
	carg2, _ := arg2.PassValue()
	ctitle, _ := unpackPCharString(title)
	cinitialState, _ := (C.enum_nk_collapse_states)(initialState), cgoAllocsUnknown
	chash, _ := unpackPCharString(hash)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	cseed, _ := (C.int)(seed), cgoAllocsUnknown
	__ret := C.nk_tree_image_push_hashed(carg0, carg1, carg2, ctitle, cinitialState, chash, clen, cseed)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkTreePop function as declared in nk/nuklear.h:733
func NkTreePop(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_tree_pop(carg0)
	packSContext(arg0, carg0)
}

// NkText function as declared in nk/nuklear.h:736
func NkText(arg0 []Context, arg1 string, arg2 int32, arg3 Flags) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	carg3, _ := (C.nk_flags)(arg3), cgoAllocsUnknown
	C.nk_text(carg0, carg1, carg2, carg3)
	packSContext(arg0, carg0)
}

// NkTextColored function as declared in nk/nuklear.h:737
func NkTextColored(arg0 []Context, arg1 string, arg2 int32, arg3 Flags, arg4 Color) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	carg3, _ := (C.nk_flags)(arg3), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	C.nk_text_colored(carg0, carg1, carg2, carg3, carg4)
	packSContext(arg0, carg0)
}

// NkTextWrap function as declared in nk/nuklear.h:738
func NkTextWrap(arg0 []Context, arg1 string, arg2 int32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	C.nk_text_wrap(carg0, carg1, carg2)
	packSContext(arg0, carg0)
}

// NkTextWrapColored function as declared in nk/nuklear.h:739
func NkTextWrapColored(arg0 []Context, arg1 string, arg2 int32, arg3 Color) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	carg3, _ := arg3.PassValue()
	C.nk_text_wrap_colored(carg0, carg1, carg2, carg3)
	packSContext(arg0, carg0)
}

// NkLabel function as declared in nk/nuklear.h:741
func NkLabel(arg0 []Context, arg1 string, align Flags) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	C.nk_label(carg0, carg1, calign)
	packSContext(arg0, carg0)
}

// NkLabelColored function as declared in nk/nuklear.h:742
func NkLabelColored(arg0 []Context, arg1 string, align Flags, arg3 Color) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	carg3, _ := arg3.PassValue()
	C.nk_label_colored(carg0, carg1, calign, carg3)
	packSContext(arg0, carg0)
}

// NkLabelWrap function as declared in nk/nuklear.h:743
func NkLabelWrap(arg0 []Context, arg1 string) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	C.nk_label_wrap(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkLabelColoredWrap function as declared in nk/nuklear.h:744
func NkLabelColoredWrap(arg0 []Context, arg1 string, arg2 Color) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := arg2.PassValue()
	C.nk_label_colored_wrap(carg0, carg1, carg2)
	packSContext(arg0, carg0)
}

// NkImage function as declared in nk/nuklear.h:745
func NkImage(arg0 []Context, arg1 Image) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	C.nk_image(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkButtonText function as declared in nk/nuklear.h:762
func NkButtonText(arg0 []Context, title string, len int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	ctitle, _ := unpackPCharString(title)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	__ret := C.nk_button_text(carg0, ctitle, clen)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonLabel function as declared in nk/nuklear.h:763
func NkButtonLabel(arg0 []Context, title string) int32 {
	carg0, _ := unpackArgSContext(arg0)
	ctitle, _ := unpackPCharString(title)
	__ret := C.nk_button_label(carg0, ctitle)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonColor function as declared in nk/nuklear.h:764
func NkButtonColor(arg0 []Context, arg1 Color) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_button_color(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonSymbol function as declared in nk/nuklear.h:765
func NkButtonSymbol(arg0 []Context, arg1 SymbolType) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	__ret := C.nk_button_symbol(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonImage function as declared in nk/nuklear.h:766
func NkButtonImage(arg0 []Context, img Image) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cimg, _ := img.PassValue()
	__ret := C.nk_button_image(carg0, cimg)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonSymbolLabel function as declared in nk/nuklear.h:767
func NkButtonSymbolLabel(arg0 []Context, arg1 SymbolType, arg2 string, textAlignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	ctextAlignment, _ := (C.nk_flags)(textAlignment), cgoAllocsUnknown
	__ret := C.nk_button_symbol_label(carg0, carg1, carg2, ctextAlignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonSymbolText function as declared in nk/nuklear.h:768
func NkButtonSymbolText(arg0 []Context, arg1 SymbolType, arg2 string, arg3 int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_button_symbol_text(carg0, carg1, carg2, carg3, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonImageLabel function as declared in nk/nuklear.h:769
func NkButtonImageLabel(arg0 []Context, img Image, arg2 string, textAlignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cimg, _ := img.PassValue()
	carg2, _ := unpackPCharString(arg2)
	ctextAlignment, _ := (C.nk_flags)(textAlignment), cgoAllocsUnknown
	__ret := C.nk_button_image_label(carg0, cimg, carg2, ctextAlignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonImageText function as declared in nk/nuklear.h:770
func NkButtonImageText(arg0 []Context, img Image, arg2 string, arg3 int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cimg, _ := img.PassValue()
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_button_image_text(carg0, cimg, carg2, carg3, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonSetBehavior function as declared in nk/nuklear.h:772
func NkButtonSetBehavior(arg0 []Context, arg1 ButtonBehavior) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_button_behavior)(arg1), cgoAllocsUnknown
	C.nk_button_set_behavior(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkButtonPushBehavior function as declared in nk/nuklear.h:773
func NkButtonPushBehavior(arg0 []Context, arg1 ButtonBehavior) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_button_behavior)(arg1), cgoAllocsUnknown
	__ret := C.nk_button_push_behavior(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkButtonPopBehavior function as declared in nk/nuklear.h:774
func NkButtonPopBehavior(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_button_pop_behavior(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkCheckLabel function as declared in nk/nuklear.h:777
func NkCheckLabel(arg0 []Context, arg1 string, active int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	cactive, _ := (C.int)(active), cgoAllocsUnknown
	__ret := C.nk_check_label(carg0, carg1, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkCheckText function as declared in nk/nuklear.h:778
func NkCheckText(arg0 []Context, arg1 string, arg2 int32, active int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	cactive, _ := (C.int)(active), cgoAllocsUnknown
	__ret := C.nk_check_text(carg0, carg1, carg2, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkCheckFlagsLabel function as declared in nk/nuklear.h:779
func NkCheckFlagsLabel(arg0 []Context, arg1 string, flags uint32, value uint32) uint32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_check_flags_label(carg0, carg1, cflags, cvalue)
	packSContext(arg0, carg0)
	__v := (uint32)(__ret)
	return __v
}

// NkCheckFlagsText function as declared in nk/nuklear.h:780
func NkCheckFlagsText(arg0 []Context, arg1 string, arg2 int32, flags uint32, value uint32) uint32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_check_flags_text(carg0, carg1, carg2, cflags, cvalue)
	packSContext(arg0, carg0)
	__v := (uint32)(__ret)
	return __v
}

// NkCheckboxLabel function as declared in nk/nuklear.h:781
func NkCheckboxLabel(arg0 []Context, arg1 string, active []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	cactive, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&active)).Data)), cgoAllocsUnknown
	__ret := C.nk_checkbox_label(carg0, carg1, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkCheckboxText function as declared in nk/nuklear.h:782
func NkCheckboxText(arg0 []Context, arg1 string, arg2 int32, active []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	cactive, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&active)).Data)), cgoAllocsUnknown
	__ret := C.nk_checkbox_text(carg0, carg1, carg2, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkCheckboxFlagsLabel function as declared in nk/nuklear.h:783
func NkCheckboxFlagsLabel(arg0 []Context, arg1 string, flags []uint32, value uint32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	cflags, _ := (*C.uint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&flags)).Data)), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_checkbox_flags_label(carg0, carg1, cflags, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkCheckboxFlagsText function as declared in nk/nuklear.h:784
func NkCheckboxFlagsText(arg0 []Context, arg1 string, arg2 int32, flags []uint32, value uint32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	cflags, _ := (*C.uint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&flags)).Data)), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_checkbox_flags_text(carg0, carg1, carg2, cflags, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkRadioLabel function as declared in nk/nuklear.h:787
func NkRadioLabel(arg0 []Context, arg1 string, active []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	cactive, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&active)).Data)), cgoAllocsUnknown
	__ret := C.nk_radio_label(carg0, carg1, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkRadioText function as declared in nk/nuklear.h:788
func NkRadioText(arg0 []Context, arg1 string, arg2 int32, active []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	cactive, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&active)).Data)), cgoAllocsUnknown
	__ret := C.nk_radio_text(carg0, carg1, carg2, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkOptionLabel function as declared in nk/nuklear.h:789
func NkOptionLabel(arg0 []Context, arg1 string, active int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	cactive, _ := (C.int)(active), cgoAllocsUnknown
	__ret := C.nk_option_label(carg0, carg1, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkOptionText function as declared in nk/nuklear.h:790
func NkOptionText(arg0 []Context, arg1 string, arg2 int32, active int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	cactive, _ := (C.int)(active), cgoAllocsUnknown
	__ret := C.nk_option_text(carg0, carg1, carg2, cactive)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectableLabel function as declared in nk/nuklear.h:793
func NkSelectableLabel(arg0 []Context, arg1 string, align Flags, value []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&value)).Data)), cgoAllocsUnknown
	__ret := C.nk_selectable_label(carg0, carg1, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectableText function as declared in nk/nuklear.h:794
func NkSelectableText(arg0 []Context, arg1 string, arg2 int32, align Flags, value []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&value)).Data)), cgoAllocsUnknown
	__ret := C.nk_selectable_text(carg0, carg1, carg2, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectableImageLabel function as declared in nk/nuklear.h:795
func NkSelectableImageLabel(arg0 []Context, arg1 Image, arg2 string, align Flags, value []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&value)).Data)), cgoAllocsUnknown
	__ret := C.nk_selectable_image_label(carg0, carg1, carg2, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectableImageText function as declared in nk/nuklear.h:796
func NkSelectableImageText(arg0 []Context, arg1 Image, arg2 string, arg3 int32, align Flags, value []int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&value)).Data)), cgoAllocsUnknown
	__ret := C.nk_selectable_image_text(carg0, carg1, carg2, carg3, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectLabel function as declared in nk/nuklear.h:798
func NkSelectLabel(arg0 []Context, arg1 string, align Flags, value int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	__ret := C.nk_select_label(carg0, carg1, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectText function as declared in nk/nuklear.h:799
func NkSelectText(arg0 []Context, arg1 string, arg2 int32, align Flags, value int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	__ret := C.nk_select_text(carg0, carg1, carg2, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectImageLabel function as declared in nk/nuklear.h:800
func NkSelectImageLabel(arg0 []Context, arg1 Image, arg2 string, align Flags, value int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	__ret := C.nk_select_image_label(carg0, carg1, carg2, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSelectImageText function as declared in nk/nuklear.h:801
func NkSelectImageText(arg0 []Context, arg1 Image, arg2 string, arg3 int32, align Flags, value int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	__ret := C.nk_select_image_text(carg0, carg1, carg2, carg3, calign, cvalue)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSlideFloat function as declared in nk/nuklear.h:804
func NkSlideFloat(arg0 []Context, min float32, val float32, max float32, step float32) float32 {
	carg0, _ := unpackArgSContext(arg0)
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cval, _ := (C.float)(val), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	cstep, _ := (C.float)(step), cgoAllocsUnknown
	__ret := C.nk_slide_float(carg0, cmin, cval, cmax, cstep)
	packSContext(arg0, carg0)
	__v := (float32)(__ret)
	return __v
}

// NkSlideInt function as declared in nk/nuklear.h:805
func NkSlideInt(arg0 []Context, min int32, val int32, max int32, step int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cmin, _ := (C.int)(min), cgoAllocsUnknown
	cval, _ := (C.int)(val), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	cstep, _ := (C.int)(step), cgoAllocsUnknown
	__ret := C.nk_slide_int(carg0, cmin, cval, cmax, cstep)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSliderFloat function as declared in nk/nuklear.h:806
func NkSliderFloat(arg0 []Context, min float32, val []float32, max float32, step float32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cval, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	cstep, _ := (C.float)(step), cgoAllocsUnknown
	__ret := C.nk_slider_float(carg0, cmin, cval, cmax, cstep)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSliderInt function as declared in nk/nuklear.h:807
func NkSliderInt(arg0 []Context, min int32, val []int32, max int32, step int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cmin, _ := (C.int)(min), cgoAllocsUnknown
	cval, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	cstep, _ := (C.int)(step), cgoAllocsUnknown
	__ret := C.nk_slider_int(carg0, cmin, cval, cmax, cstep)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkProgress function as declared in nk/nuklear.h:810
func NkProgress(arg0 []Context, cur []Size, max Size, modifyable int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	ccur, _ := (*C.nk_size)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cur)).Data)), cgoAllocsUnknown
	cmax, _ := (C.nk_size)(max), cgoAllocsUnknown
	cmodifyable, _ := (C.int)(modifyable), cgoAllocsUnknown
	__ret := C.nk_progress(carg0, ccur, cmax, cmodifyable)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkProg function as declared in nk/nuklear.h:811
func NkProg(arg0 []Context, cur Size, max Size, modifyable int32) Size {
	carg0, _ := unpackArgSContext(arg0)
	ccur, _ := (C.nk_size)(cur), cgoAllocsUnknown
	cmax, _ := (C.nk_size)(max), cgoAllocsUnknown
	cmodifyable, _ := (C.int)(modifyable), cgoAllocsUnknown
	__ret := C.nk_prog(carg0, ccur, cmax, cmodifyable)
	packSContext(arg0, carg0)
	__v := (Size)(__ret)
	return __v
}

// NkColorPicker function as declared in nk/nuklear.h:814
func NkColorPicker(arg0 []Context, arg1 Color, arg2 ColorFormat) Color {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := (C.enum_nk_color_format)(arg2), cgoAllocsUnknown
	__ret := C.nk_color_picker(carg0, carg1, carg2)
	packSContext(arg0, carg0)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkColorPick function as declared in nk/nuklear.h:815
func NkColorPick(arg0 []Context, arg1 []Color, arg2 ColorFormat) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSColor(arg1)
	carg2, _ := (C.enum_nk_color_format)(arg2), cgoAllocsUnknown
	__ret := C.nk_color_pick(carg0, carg1, carg2)
	packSColor(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkPropertyInt function as declared in nk/nuklear.h:818
func NkPropertyInt(arg0 []Context, name string, min int32, val []int32, max int32, step int32, incPerPixel float32) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	cmin, _ := (C.int)(min), cgoAllocsUnknown
	cval, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	cstep, _ := (C.int)(step), cgoAllocsUnknown
	cincPerPixel, _ := (C.float)(incPerPixel), cgoAllocsUnknown
	C.nk_property_int(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	packSContext(arg0, carg0)
}

// NkPropertyFloat function as declared in nk/nuklear.h:819
func NkPropertyFloat(arg0 []Context, name string, min float32, val []float32, max float32, step float32, incPerPixel float32) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cval, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	cstep, _ := (C.float)(step), cgoAllocsUnknown
	cincPerPixel, _ := (C.float)(incPerPixel), cgoAllocsUnknown
	C.nk_property_float(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	packSContext(arg0, carg0)
}

// NkPropertyDouble function as declared in nk/nuklear.h:820
func NkPropertyDouble(arg0 []Context, name string, min float64, val []float64, max float64, step float64, incPerPixel float32) {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	cmin, _ := (C.double)(min), cgoAllocsUnknown
	cval, _ := (*C.double)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&val)).Data)), cgoAllocsUnknown
	cmax, _ := (C.double)(max), cgoAllocsUnknown
	cstep, _ := (C.double)(step), cgoAllocsUnknown
	cincPerPixel, _ := (C.float)(incPerPixel), cgoAllocsUnknown
	C.nk_property_double(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	packSContext(arg0, carg0)
}

// NkPropertyi function as declared in nk/nuklear.h:821
func NkPropertyi(arg0 []Context, name string, min int32, val int32, max int32, step int32, incPerPixel float32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	cmin, _ := (C.int)(min), cgoAllocsUnknown
	cval, _ := (C.int)(val), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	cstep, _ := (C.int)(step), cgoAllocsUnknown
	cincPerPixel, _ := (C.float)(incPerPixel), cgoAllocsUnknown
	__ret := C.nk_propertyi(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkPropertyf function as declared in nk/nuklear.h:822
func NkPropertyf(arg0 []Context, name string, min float32, val float32, max float32, step float32, incPerPixel float32) float32 {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cval, _ := (C.float)(val), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	cstep, _ := (C.float)(step), cgoAllocsUnknown
	cincPerPixel, _ := (C.float)(incPerPixel), cgoAllocsUnknown
	__ret := C.nk_propertyf(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	packSContext(arg0, carg0)
	__v := (float32)(__ret)
	return __v
}

// NkPropertyd function as declared in nk/nuklear.h:823
func NkPropertyd(arg0 []Context, name string, min float64, val float64, max float64, step float64, incPerPixel float32) float64 {
	carg0, _ := unpackArgSContext(arg0)
	cname, _ := unpackPCharString(name)
	cmin, _ := (C.double)(min), cgoAllocsUnknown
	cval, _ := (C.double)(val), cgoAllocsUnknown
	cmax, _ := (C.double)(max), cgoAllocsUnknown
	cstep, _ := (C.double)(step), cgoAllocsUnknown
	cincPerPixel, _ := (C.float)(incPerPixel), cgoAllocsUnknown
	__ret := C.nk_propertyd(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	packSContext(arg0, carg0)
	__v := (float64)(__ret)
	return __v
}

// NkEditString function as declared in nk/nuklear.h:826
func NkEditString(arg0 []Context, arg1 Flags, buffer []byte, len []int32, max int32, arg5 PluginFilter) Flags {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.nk_flags)(arg1), cgoAllocsUnknown
	cbuffer, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	carg5, _ := arg5.PassValue()
	__ret := C.nk_edit_string(carg0, carg1, cbuffer, clen, cmax, carg5)
	packSContext(arg0, carg0)
	__v := (Flags)(__ret)
	return __v
}

// NkEditBuffer function as declared in nk/nuklear.h:827
func NkEditBuffer(arg0 []Context, arg1 Flags, arg2 []TextEdit, arg3 PluginFilter) Flags {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.nk_flags)(arg1), cgoAllocsUnknown
	carg2, _ := unpackArgSTextEdit(arg2)
	carg3, _ := arg3.PassValue()
	__ret := C.nk_edit_buffer(carg0, carg1, carg2, carg3)
	packSTextEdit(arg2, carg2)
	packSContext(arg0, carg0)
	__v := (Flags)(__ret)
	return __v
}

// NkEditStringZeroTerminated function as declared in nk/nuklear.h:828
func NkEditStringZeroTerminated(arg0 []Context, arg1 Flags, buffer []byte, max int32, arg4 PluginFilter) Flags {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.nk_flags)(arg1), cgoAllocsUnknown
	cbuffer, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	__ret := C.nk_edit_string_zero_terminated(carg0, carg1, cbuffer, cmax, carg4)
	packSContext(arg0, carg0)
	__v := (Flags)(__ret)
	return __v
}

// NkChartBegin function as declared in nk/nuklear.h:831
func NkChartBegin(arg0 []Context, arg1 ChartType, num int32, min float32, max float32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_chart_type)(arg1), cgoAllocsUnknown
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	__ret := C.nk_chart_begin(carg0, carg1, cnum, cmin, cmax)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkChartBeginColored function as declared in nk/nuklear.h:832
func NkChartBeginColored(arg0 []Context, arg1 ChartType, arg2 Color, active Color, num int32, min float32, max float32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_chart_type)(arg1), cgoAllocsUnknown
	carg2, _ := arg2.PassValue()
	cactive, _ := active.PassValue()
	cnum, _ := (C.int)(num), cgoAllocsUnknown
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	__ret := C.nk_chart_begin_colored(carg0, carg1, carg2, cactive, cnum, cmin, cmax)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkChartAddSlot function as declared in nk/nuklear.h:833
func NkChartAddSlot(ctx []Context, arg1 ChartType, count int32, minValue float32, maxValue float32) {
	cctx, _ := unpackArgSContext(ctx)
	carg1, _ := (C.enum_nk_chart_type)(arg1), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cminValue, _ := (C.float)(minValue), cgoAllocsUnknown
	cmaxValue, _ := (C.float)(maxValue), cgoAllocsUnknown
	C.nk_chart_add_slot(cctx, carg1, ccount, cminValue, cmaxValue)
	packSContext(ctx, cctx)
}

// NkChartAddSlotColored function as declared in nk/nuklear.h:834
func NkChartAddSlotColored(ctx []Context, arg1 ChartType, arg2 Color, active Color, count int32, minValue float32, maxValue float32) {
	cctx, _ := unpackArgSContext(ctx)
	carg1, _ := (C.enum_nk_chart_type)(arg1), cgoAllocsUnknown
	carg2, _ := arg2.PassValue()
	cactive, _ := active.PassValue()
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cminValue, _ := (C.float)(minValue), cgoAllocsUnknown
	cmaxValue, _ := (C.float)(maxValue), cgoAllocsUnknown
	C.nk_chart_add_slot_colored(cctx, carg1, carg2, cactive, ccount, cminValue, cmaxValue)
	packSContext(ctx, cctx)
}

// NkChartPush function as declared in nk/nuklear.h:835
func NkChartPush(arg0 []Context, arg1 float32) Flags {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.float)(arg1), cgoAllocsUnknown
	__ret := C.nk_chart_push(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (Flags)(__ret)
	return __v
}

// NkChartPushSlot function as declared in nk/nuklear.h:836
func NkChartPushSlot(arg0 []Context, arg1 float32, arg2 int32) Flags {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.float)(arg1), cgoAllocsUnknown
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_chart_push_slot(carg0, carg1, carg2)
	packSContext(arg0, carg0)
	__v := (Flags)(__ret)
	return __v
}

// NkChartEnd function as declared in nk/nuklear.h:837
func NkChartEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_chart_end(carg0)
	packSContext(arg0, carg0)
}

// NkPlot function as declared in nk/nuklear.h:838
func NkPlot(arg0 []Context, arg1 ChartType, values []float32, count int32, offset int32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_chart_type)(arg1), cgoAllocsUnknown
	cvalues, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&values)).Data)), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	coffset, _ := (C.int)(offset), cgoAllocsUnknown
	C.nk_plot(carg0, carg1, cvalues, ccount, coffset)
	packSContext(arg0, carg0)
}

// NkPlotFunction function as declared in nk/nuklear.h:839
func NkPlotFunction(arg0 []Context, arg1 ChartType, userdata unsafe.Pointer, valueGetter *func(user unsafe.Pointer, index int32) float32, count int32, offset int32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_chart_type)(arg1), cgoAllocsUnknown
	cuserdata, _ := (unsafe.Pointer)(unsafe.Pointer(userdata)), cgoAllocsUnknown
	cvalueGetter, _ := (*[0]byte)(unsafe.Pointer(valueGetter)), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	coffset, _ := (C.int)(offset), cgoAllocsUnknown
	C.nk_plot_function(carg0, carg1, cuserdata, cvalueGetter, ccount, coffset)
	packSContext(arg0, carg0)
}

// NkPopupBegin function as declared in nk/nuklear.h:842
func NkPopupBegin(arg0 []Context, arg1 []Panel, arg2 PopupType, arg3 string, arg4 Flags, bounds Rect) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := (C.enum_nk_popup_type)(arg2), cgoAllocsUnknown
	carg3, _ := unpackPCharString(arg3)
	carg4, _ := (C.nk_flags)(arg4), cgoAllocsUnknown
	cbounds, _ := bounds.PassValue()
	__ret := C.nk_popup_begin(carg0, carg1, carg2, carg3, carg4, cbounds)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkPopupClose function as declared in nk/nuklear.h:843
func NkPopupClose(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_popup_close(carg0)
	packSContext(arg0, carg0)
}

// NkPopupEnd function as declared in nk/nuklear.h:844
func NkPopupEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_popup_end(carg0)
	packSContext(arg0, carg0)
}

// NkCombo function as declared in nk/nuklear.h:847
func NkCombo(arg0 []Context, items []string, count int32, selected int32, itemHeight int32, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	citems, _ := unpackArgSString(items)
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cselected, _ := (C.int)(selected), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo(carg0, citems, ccount, cselected, citemHeight, csize)
	packSString(items, citems)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboSeparator function as declared in nk/nuklear.h:848
func NkComboSeparator(arg0 []Context, itemsSeparatedBySeparator string, separator int32, selected int32, count int32, itemHeight int32, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	citemsSeparatedBySeparator, _ := unpackPCharString(itemsSeparatedBySeparator)
	cseparator, _ := (C.int)(separator), cgoAllocsUnknown
	cselected, _ := (C.int)(selected), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo_separator(carg0, citemsSeparatedBySeparator, cseparator, cselected, ccount, citemHeight, csize)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboString function as declared in nk/nuklear.h:849
func NkComboString(arg0 []Context, itemsSeparatedByZeros string, selected int32, count int32, itemHeight int32, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	citemsSeparatedByZeros, _ := unpackPCharString(itemsSeparatedByZeros)
	cselected, _ := (C.int)(selected), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo_string(carg0, citemsSeparatedByZeros, cselected, ccount, citemHeight, csize)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboCallback function as declared in nk/nuklear.h:850
func NkComboCallback(arg0 []Context, itemGetter *func(arg0 unsafe.Pointer, arg1 int32, arg2 []string), userdata unsafe.Pointer, selected int32, count int32, itemHeight int32, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	citemGetter, _ := (*[0]byte)(unsafe.Pointer(itemGetter)), cgoAllocsUnknown
	cuserdata, _ := (unsafe.Pointer)(unsafe.Pointer(userdata)), cgoAllocsUnknown
	cselected, _ := (C.int)(selected), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo_callback(carg0, citemGetter, cuserdata, cselected, ccount, citemHeight, csize)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkCombobox function as declared in nk/nuklear.h:851
func NkCombobox(arg0 []Context, items []string, count int32, selected []int32, itemHeight int32, size Vec2) {
	carg0, _ := unpackArgSContext(arg0)
	citems, _ := unpackArgSString(items)
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cselected, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&selected)).Data)), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	C.nk_combobox(carg0, citems, ccount, cselected, citemHeight, csize)
	packSString(items, citems)
	packSContext(arg0, carg0)
}

// NkComboboxString function as declared in nk/nuklear.h:852
func NkComboboxString(arg0 []Context, itemsSeparatedByZeros string, selected []int32, count int32, itemHeight int32, size Vec2) {
	carg0, _ := unpackArgSContext(arg0)
	citemsSeparatedByZeros, _ := unpackPCharString(itemsSeparatedByZeros)
	cselected, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&selected)).Data)), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	C.nk_combobox_string(carg0, citemsSeparatedByZeros, cselected, ccount, citemHeight, csize)
	packSContext(arg0, carg0)
}

// NkComboboxSeparator function as declared in nk/nuklear.h:853
func NkComboboxSeparator(arg0 []Context, itemsSeparatedBySeparator string, separator int32, selected []int32, count int32, itemHeight int32, size Vec2) {
	carg0, _ := unpackArgSContext(arg0)
	citemsSeparatedBySeparator, _ := unpackPCharString(itemsSeparatedBySeparator)
	cseparator, _ := (C.int)(separator), cgoAllocsUnknown
	cselected, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&selected)).Data)), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	C.nk_combobox_separator(carg0, citemsSeparatedBySeparator, cseparator, cselected, ccount, citemHeight, csize)
	packSContext(arg0, carg0)
}

// NkComboboxCallback function as declared in nk/nuklear.h:854
func NkComboboxCallback(arg0 []Context, itemGetter *func(arg0 unsafe.Pointer, arg1 int32, arg2 []string), arg2 unsafe.Pointer, selected []int32, count int32, itemHeight int32, size Vec2) {
	carg0, _ := unpackArgSContext(arg0)
	citemGetter, _ := (*[0]byte)(unsafe.Pointer(itemGetter)), cgoAllocsUnknown
	carg2, _ := (unsafe.Pointer)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	cselected, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&selected)).Data)), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	citemHeight, _ := (C.int)(itemHeight), cgoAllocsUnknown
	csize, _ := size.PassValue()
	C.nk_combobox_callback(carg0, citemGetter, carg2, cselected, ccount, citemHeight, csize)
	packSContext(arg0, carg0)
}

// NkComboBeginText function as declared in nk/nuklear.h:857
func NkComboBeginText(arg0 []Context, arg1 []Panel, selected string, arg3 int32, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cselected, _ := unpackPCharString(selected)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_text(carg0, carg1, cselected, carg3, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginLabel function as declared in nk/nuklear.h:858
func NkComboBeginLabel(arg0 []Context, arg1 []Panel, selected string, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cselected, _ := unpackPCharString(selected)
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_label(carg0, carg1, cselected, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginColor function as declared in nk/nuklear.h:859
func NkComboBeginColor(arg0 []Context, arg1 []Panel, color Color, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	ccolor, _ := color.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_color(carg0, carg1, ccolor, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginSymbol function as declared in nk/nuklear.h:860
func NkComboBeginSymbol(arg0 []Context, arg1 []Panel, arg2 SymbolType, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := (C.enum_nk_symbol_type)(arg2), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_symbol(carg0, carg1, carg2, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginSymbolLabel function as declared in nk/nuklear.h:861
func NkComboBeginSymbolLabel(arg0 []Context, arg1 []Panel, selected string, arg3 SymbolType, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cselected, _ := unpackPCharString(selected)
	carg3, _ := (C.enum_nk_symbol_type)(arg3), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_symbol_label(carg0, carg1, cselected, carg3, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginSymbolText function as declared in nk/nuklear.h:862
func NkComboBeginSymbolText(arg0 []Context, arg1 []Panel, selected string, arg3 int32, arg4 SymbolType, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cselected, _ := unpackPCharString(selected)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	carg4, _ := (C.enum_nk_symbol_type)(arg4), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_symbol_text(carg0, carg1, cselected, carg3, carg4, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginImage function as declared in nk/nuklear.h:863
func NkComboBeginImage(arg0 []Context, arg1 []Panel, img Image, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cimg, _ := img.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_image(carg0, carg1, cimg, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginImageLabel function as declared in nk/nuklear.h:864
func NkComboBeginImageLabel(arg0 []Context, arg1 []Panel, selected string, arg3 Image, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cselected, _ := unpackPCharString(selected)
	carg3, _ := arg3.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_image_label(carg0, carg1, cselected, carg3, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboBeginImageText function as declared in nk/nuklear.h:865
func NkComboBeginImageText(arg0 []Context, arg1 []Panel, selected string, arg3 int32, arg4 Image, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cselected, _ := unpackPCharString(selected)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_combo_begin_image_text(carg0, carg1, cselected, carg3, carg4, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboItemLabel function as declared in nk/nuklear.h:866
func NkComboItemLabel(arg0 []Context, arg1 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_label(carg0, carg1, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboItemText function as declared in nk/nuklear.h:867
func NkComboItemText(arg0 []Context, arg1 string, arg2 int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_text(carg0, carg1, carg2, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboItemImageLabel function as declared in nk/nuklear.h:868
func NkComboItemImageLabel(arg0 []Context, arg1 Image, arg2 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_image_label(carg0, carg1, carg2, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboItemImageText function as declared in nk/nuklear.h:869
func NkComboItemImageText(arg0 []Context, arg1 Image, arg2 string, arg3 int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_image_text(carg0, carg1, carg2, carg3, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboItemSymbolLabel function as declared in nk/nuklear.h:870
func NkComboItemSymbolLabel(arg0 []Context, arg1 SymbolType, arg2 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_symbol_label(carg0, carg1, carg2, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboItemSymbolText function as declared in nk/nuklear.h:871
func NkComboItemSymbolText(arg0 []Context, arg1 SymbolType, arg2 string, arg3 int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_symbol_text(carg0, carg1, carg2, carg3, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkComboClose function as declared in nk/nuklear.h:872
func NkComboClose(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_combo_close(carg0)
	packSContext(arg0, carg0)
}

// NkComboEnd function as declared in nk/nuklear.h:873
func NkComboEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_combo_end(carg0)
	packSContext(arg0, carg0)
}

// NkContextualBegin function as declared in nk/nuklear.h:876
func NkContextualBegin(arg0 []Context, arg1 []Panel, arg2 Flags, arg3 Vec2, triggerBounds Rect) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := (C.nk_flags)(arg2), cgoAllocsUnknown
	carg3, _ := arg3.PassValue()
	ctriggerBounds, _ := triggerBounds.PassValue()
	__ret := C.nk_contextual_begin(carg0, carg1, carg2, carg3, ctriggerBounds)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkContextualItemText function as declared in nk/nuklear.h:877
func NkContextualItemText(arg0 []Context, arg1 string, arg2 int32, align Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	__ret := C.nk_contextual_item_text(carg0, carg1, carg2, calign)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkContextualItemLabel function as declared in nk/nuklear.h:878
func NkContextualItemLabel(arg0 []Context, arg1 string, align Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	__ret := C.nk_contextual_item_label(carg0, carg1, calign)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkContextualItemImageLabel function as declared in nk/nuklear.h:879
func NkContextualItemImageLabel(arg0 []Context, arg1 Image, arg2 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_image_label(carg0, carg1, carg2, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkContextualItemImageText function as declared in nk/nuklear.h:880
func NkContextualItemImageText(arg0 []Context, arg1 Image, arg2 string, len int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_image_text(carg0, carg1, carg2, clen, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkContextualItemSymbolLabel function as declared in nk/nuklear.h:881
func NkContextualItemSymbolLabel(arg0 []Context, arg1 SymbolType, arg2 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_symbol_label(carg0, carg1, carg2, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkContextualItemSymbolText function as declared in nk/nuklear.h:882
func NkContextualItemSymbolText(arg0 []Context, arg1 SymbolType, arg2 string, arg3 int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_symbol_text(carg0, carg1, carg2, carg3, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkContextualClose function as declared in nk/nuklear.h:883
func NkContextualClose(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_contextual_close(carg0)
	packSContext(arg0, carg0)
}

// NkContextualEnd function as declared in nk/nuklear.h:884
func NkContextualEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_contextual_end(carg0)
	packSContext(arg0, carg0)
}

// NkTooltip function as declared in nk/nuklear.h:887
func NkTooltip(arg0 []Context, arg1 string) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	C.nk_tooltip(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkTooltipBegin function as declared in nk/nuklear.h:888
func NkTooltipBegin(arg0 []Context, arg1 []Panel, width float32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	__ret := C.nk_tooltip_begin(carg0, carg1, cwidth)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkTooltipEnd function as declared in nk/nuklear.h:889
func NkTooltipEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_tooltip_end(carg0)
	packSContext(arg0, carg0)
}

// NkMenubarBegin function as declared in nk/nuklear.h:892
func NkMenubarBegin(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_menubar_begin(carg0)
	packSContext(arg0, carg0)
}

// NkMenubarEnd function as declared in nk/nuklear.h:893
func NkMenubarEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_menubar_end(carg0)
	packSContext(arg0, carg0)
}

// NkMenuBeginText function as declared in nk/nuklear.h:895
func NkMenuBeginText(arg0 []Context, arg1 []Panel, title string, titleLen int32, align Flags, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	ctitle, _ := unpackPCharString(title)
	ctitleLen, _ := (C.int)(titleLen), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_text(carg0, carg1, ctitle, ctitleLen, calign, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuBeginLabel function as declared in nk/nuklear.h:896
func NkMenuBeginLabel(arg0 []Context, arg1 []Panel, arg2 string, align Flags, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := unpackPCharString(arg2)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_label(carg0, carg1, carg2, calign, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuBeginImage function as declared in nk/nuklear.h:897
func NkMenuBeginImage(arg0 []Context, arg1 []Panel, arg2 string, arg3 Image, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := arg3.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_image(carg0, carg1, carg2, carg3, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuBeginImageText function as declared in nk/nuklear.h:898
func NkMenuBeginImageText(arg0 []Context, arg1 []Panel, arg2 string, arg3 int32, align Flags, arg5 Image, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	carg5, _ := arg5.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_image_text(carg0, carg1, carg2, carg3, calign, carg5, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuBeginImageLabel function as declared in nk/nuklear.h:899
func NkMenuBeginImageLabel(arg0 []Context, arg1 []Panel, arg2 string, align Flags, arg4 Image, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := unpackPCharString(arg2)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_image_label(carg0, carg1, carg2, calign, carg4, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuBeginSymbol function as declared in nk/nuklear.h:900
func NkMenuBeginSymbol(arg0 []Context, arg1 []Panel, arg2 string, arg3 SymbolType, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.enum_nk_symbol_type)(arg3), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_symbol(carg0, carg1, carg2, carg3, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuBeginSymbolText function as declared in nk/nuklear.h:901
func NkMenuBeginSymbolText(arg0 []Context, arg1 []Panel, arg2 string, arg3 int32, align Flags, arg5 SymbolType, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	carg5, _ := (C.enum_nk_symbol_type)(arg5), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_symbol_text(carg0, carg1, carg2, carg3, calign, carg5, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuBeginSymbolLabel function as declared in nk/nuklear.h:902
func NkMenuBeginSymbolLabel(arg0 []Context, arg1 []Panel, arg2 string, align Flags, arg4 SymbolType, size Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSPanel(arg1)
	carg2, _ := unpackPCharString(arg2)
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	carg4, _ := (C.enum_nk_symbol_type)(arg4), cgoAllocsUnknown
	csize, _ := size.PassValue()
	__ret := C.nk_menu_begin_symbol_label(carg0, carg1, carg2, calign, carg4, csize)
	packSPanel(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuItemText function as declared in nk/nuklear.h:903
func NkMenuItemText(arg0 []Context, arg1 string, arg2 int32, align Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	calign, _ := (C.nk_flags)(align), cgoAllocsUnknown
	__ret := C.nk_menu_item_text(carg0, carg1, carg2, calign)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuItemLabel function as declared in nk/nuklear.h:904
func NkMenuItemLabel(arg0 []Context, arg1 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackPCharString(arg1)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_label(carg0, carg1, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuItemImageLabel function as declared in nk/nuklear.h:905
func NkMenuItemImageLabel(arg0 []Context, arg1 Image, arg2 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_image_label(carg0, carg1, carg2, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuItemImageText function as declared in nk/nuklear.h:906
func NkMenuItemImageText(arg0 []Context, arg1 Image, arg2 string, len int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackPCharString(arg2)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_image_text(carg0, carg1, carg2, clen, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuItemSymbolText function as declared in nk/nuklear.h:907
func NkMenuItemSymbolText(arg0 []Context, arg1 SymbolType, arg2 string, arg3 int32, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	carg3, _ := (C.int)(arg3), cgoAllocsUnknown
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_symbol_text(carg0, carg1, carg2, carg3, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuItemSymbolLabel function as declared in nk/nuklear.h:908
func NkMenuItemSymbolLabel(arg0 []Context, arg1 SymbolType, arg2 string, alignment Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_symbol_type)(arg1), cgoAllocsUnknown
	carg2, _ := unpackPCharString(arg2)
	calignment, _ := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_symbol_label(carg0, carg1, carg2, calignment)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkMenuClose function as declared in nk/nuklear.h:909
func NkMenuClose(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_menu_close(carg0)
	packSContext(arg0, carg0)
}

// NkMenuEnd function as declared in nk/nuklear.h:910
func NkMenuEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_menu_end(carg0)
	packSContext(arg0, carg0)
}

// NkInputBegin function as declared in nk/nuklear.h:924
func NkInputBegin(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_input_begin(carg0)
	packSContext(arg0, carg0)
}

// NkInputMotion function as declared in nk/nuklear.h:925
func NkInputMotion(arg0 []Context, x int32, y int32) {
	carg0, _ := unpackArgSContext(arg0)
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	C.nk_input_motion(carg0, cx, cy)
	packSContext(arg0, carg0)
}

// NkInputKey function as declared in nk/nuklear.h:926
func NkInputKey(arg0 []Context, arg1 Keys, down int32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_keys)(arg1), cgoAllocsUnknown
	cdown, _ := (C.int)(down), cgoAllocsUnknown
	C.nk_input_key(carg0, carg1, cdown)
	packSContext(arg0, carg0)
}

// NkInputButton function as declared in nk/nuklear.h:927
func NkInputButton(arg0 []Context, arg1 Buttons, x int32, y int32, down int32) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cdown, _ := (C.int)(down), cgoAllocsUnknown
	C.nk_input_button(carg0, carg1, cx, cy, cdown)
	packSContext(arg0, carg0)
}

// NkInputScroll function as declared in nk/nuklear.h:928
func NkInputScroll(arg0 []Context, y float32) {
	carg0, _ := unpackArgSContext(arg0)
	cy, _ := (C.float)(y), cgoAllocsUnknown
	C.nk_input_scroll(carg0, cy)
	packSContext(arg0, carg0)
}

// NkInputChar function as declared in nk/nuklear.h:929
func NkInputChar(arg0 []Context, arg1 byte) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.char)(arg1), cgoAllocsUnknown
	C.nk_input_char(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkInputUnicode function as declared in nk/nuklear.h:931
func NkInputUnicode(arg0 []Context, arg1 Rune) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.nk_rune)(arg1), cgoAllocsUnknown
	C.nk_input_unicode(carg0, carg1)
	packSContext(arg0, carg0)
}

// NkInputEnd function as declared in nk/nuklear.h:932
func NkInputEnd(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_input_end(carg0)
	packSContext(arg0, carg0)
}

// NkStyleDefault function as declared in nk/nuklear.h:935
func NkStyleDefault(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_style_default(carg0)
	packSContext(arg0, carg0)
}

// NkStyleFromTable function as declared in nk/nuklear.h:936
func NkStyleFromTable(arg0 []Context, arg1 []Color) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSColor(arg1)
	C.nk_style_from_table(carg0, carg1)
	packSColor(arg1, carg1)
	packSContext(arg0, carg0)
}

// NkStyleLoadCursor function as declared in nk/nuklear.h:937
func NkStyleLoadCursor(arg0 []Context, arg1 StyleCursor, arg2 []Cursor) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_style_cursor)(arg1), cgoAllocsUnknown
	carg2, _ := unpackArgSCursor(arg2)
	C.nk_style_load_cursor(carg0, carg1, carg2)
	packSCursor(arg2, carg2)
	packSContext(arg0, carg0)
}

// NkStyleLoadAllCursors function as declared in nk/nuklear.h:938
func NkStyleLoadAllCursors(arg0 []Context, arg1 []Cursor) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSCursor(arg1)
	C.nk_style_load_all_cursors(carg0, carg1)
	packSCursor(arg1, carg1)
	packSContext(arg0, carg0)
}

// NkStyleGetColorByName function as declared in nk/nuklear.h:939
func NkStyleGetColorByName(arg0 StyleColors) string {
	carg0, _ := (C.enum_nk_style_colors)(arg0), cgoAllocsUnknown
	__ret := C.nk_style_get_color_by_name(carg0)
	__v := packPCharString(__ret)
	return __v
}

// NkStyleSetFont function as declared in nk/nuklear.h:940
func NkStyleSetFont(arg0 []Context, arg1 []UserFont) {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSUserFont(arg1)
	C.nk_style_set_font(carg0, carg1)
	packSUserFont(arg1, carg1)
	packSContext(arg0, carg0)
}

// NkStyleSetCursor function as declared in nk/nuklear.h:941
func NkStyleSetCursor(arg0 []Context, arg1 StyleCursor) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_style_cursor)(arg1), cgoAllocsUnknown
	__ret := C.nk_style_set_cursor(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStyleShowCursor function as declared in nk/nuklear.h:942
func NkStyleShowCursor(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_style_show_cursor(carg0)
	packSContext(arg0, carg0)
}

// NkStyleHideCursor function as declared in nk/nuklear.h:943
func NkStyleHideCursor(arg0 []Context) {
	carg0, _ := unpackArgSContext(arg0)
	C.nk_style_hide_cursor(carg0)
	packSContext(arg0, carg0)
}

// NkStylePushFont function as declared in nk/nuklear.h:946
func NkStylePushFont(arg0 []Context, arg1 []UserFont) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSUserFont(arg1)
	__ret := C.nk_style_push_font(carg0, carg1)
	packSUserFont(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePushFloat function as declared in nk/nuklear.h:947
func NkStylePushFloat(arg0 []Context, arg1 []float32, arg2 float32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	carg2, _ := (C.float)(arg2), cgoAllocsUnknown
	__ret := C.nk_style_push_float(carg0, carg1, carg2)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePushVec2 function as declared in nk/nuklear.h:948
func NkStylePushVec2(arg0 []Context, arg1 []Vec2, arg2 Vec2) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSVec2(arg1)
	carg2, _ := arg2.PassValue()
	__ret := C.nk_style_push_vec2(carg0, carg1, carg2)
	packSVec2(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePushStyleItem function as declared in nk/nuklear.h:949
func NkStylePushStyleItem(arg0 []Context, arg1 []StyleItem, arg2 StyleItem) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSStyleItem(arg1)
	carg2, _ := arg2.PassValue()
	__ret := C.nk_style_push_style_item(carg0, carg1, carg2)
	packSStyleItem(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePushFlags function as declared in nk/nuklear.h:950
func NkStylePushFlags(arg0 []Context, arg1 []Flags, arg2 Flags) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (*C.nk_flags)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	carg2, _ := (C.nk_flags)(arg2), cgoAllocsUnknown
	__ret := C.nk_style_push_flags(carg0, carg1, carg2)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePushColor function as declared in nk/nuklear.h:951
func NkStylePushColor(arg0 []Context, arg1 []Color, arg2 Color) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSColor(arg1)
	carg2, _ := arg2.PassValue()
	__ret := C.nk_style_push_color(carg0, carg1, carg2)
	packSColor(arg1, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePopFont function as declared in nk/nuklear.h:953
func NkStylePopFont(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_style_pop_font(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePopFloat function as declared in nk/nuklear.h:954
func NkStylePopFloat(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_style_pop_float(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePopVec2 function as declared in nk/nuklear.h:955
func NkStylePopVec2(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_style_pop_vec2(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePopStyleItem function as declared in nk/nuklear.h:956
func NkStylePopStyleItem(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_style_pop_style_item(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePopFlags function as declared in nk/nuklear.h:957
func NkStylePopFlags(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_style_pop_flags(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStylePopColor function as declared in nk/nuklear.h:958
func NkStylePopColor(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_style_pop_color(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWidgetBounds function as declared in nk/nuklear.h:961
func NkWidgetBounds(arg0 []Context) Rect {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_widget_bounds(carg0)
	packSContext(arg0, carg0)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkWidgetPosition function as declared in nk/nuklear.h:962
func NkWidgetPosition(arg0 []Context) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_widget_position(carg0)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkWidgetSize function as declared in nk/nuklear.h:963
func NkWidgetSize(arg0 []Context) Vec2 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_widget_size(carg0)
	packSContext(arg0, carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkWidgetWidth function as declared in nk/nuklear.h:964
func NkWidgetWidth(arg0 []Context) float32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_widget_width(carg0)
	packSContext(arg0, carg0)
	__v := (float32)(__ret)
	return __v
}

// NkWidgetHeight function as declared in nk/nuklear.h:965
func NkWidgetHeight(arg0 []Context) float32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_widget_height(carg0)
	packSContext(arg0, carg0)
	__v := (float32)(__ret)
	return __v
}

// NkWidgetIsHovered function as declared in nk/nuklear.h:966
func NkWidgetIsHovered(arg0 []Context) int32 {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk_widget_is_hovered(carg0)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWidgetIsMouseClicked function as declared in nk/nuklear.h:967
func NkWidgetIsMouseClicked(arg0 []Context, arg1 Buttons) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	__ret := C.nk_widget_is_mouse_clicked(carg0, carg1)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkWidgetHasMouseClickDown function as declared in nk/nuklear.h:968
func NkWidgetHasMouseClickDown(arg0 []Context, arg1 Buttons, down int32) int32 {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	cdown, _ := (C.int)(down), cgoAllocsUnknown
	__ret := C.nk_widget_has_mouse_click_down(carg0, carg1, cdown)
	packSContext(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkSpacing function as declared in nk/nuklear.h:969
func NkSpacing(arg0 []Context, cols int32) {
	carg0, _ := unpackArgSContext(arg0)
	ccols, _ := (C.int)(cols), cgoAllocsUnknown
	C.nk_spacing(carg0, ccols)
	packSContext(arg0, carg0)
}

// NkWidget function as declared in nk/nuklear.h:972
func NkWidget(arg0 []Rect, arg1 []Context) WidgetLayoutStates {
	carg0, _ := unpackArgSRect(arg0)
	carg1, _ := unpackArgSContext(arg1)
	__ret := C.nk_widget(carg0, carg1)
	packSContext(arg1, carg1)
	packSRect(arg0, carg0)
	__v := (WidgetLayoutStates)(__ret)
	return __v
}

// NkWidgetFitting function as declared in nk/nuklear.h:973
func NkWidgetFitting(arg0 []Rect, arg1 []Context, arg2 Vec2) WidgetLayoutStates {
	carg0, _ := unpackArgSRect(arg0)
	carg1, _ := unpackArgSContext(arg1)
	carg2, _ := arg2.PassValue()
	__ret := C.nk_widget_fitting(carg0, carg1, carg2)
	packSContext(arg1, carg1)
	packSRect(arg0, carg0)
	__v := (WidgetLayoutStates)(__ret)
	return __v
}

// NkRgb function as declared in nk/nuklear.h:976
func NkRgb(r int32, g int32, b int32) Color {
	cr, _ := (C.int)(r), cgoAllocsUnknown
	cg, _ := (C.int)(g), cgoAllocsUnknown
	cb, _ := (C.int)(b), cgoAllocsUnknown
	__ret := C.nk_rgb(cr, cg, cb)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbIv function as declared in nk/nuklear.h:977
func NkRgbIv(rgb []int32) Color {
	crgb, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rgb)).Data)), cgoAllocsUnknown
	__ret := C.nk_rgb_iv(crgb)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbF function as declared in nk/nuklear.h:979
func NkRgbF(r float32, g float32, b float32) Color {
	cr, _ := (C.float)(r), cgoAllocsUnknown
	cg, _ := (C.float)(g), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	__ret := C.nk_rgb_f(cr, cg, cb)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbFv function as declared in nk/nuklear.h:980
func NkRgbFv(rgb []float32) Color {
	crgb, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rgb)).Data)), cgoAllocsUnknown
	__ret := C.nk_rgb_fv(crgb)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbHex function as declared in nk/nuklear.h:981
func NkRgbHex(rgb string) Color {
	crgb, _ := unpackPCharString(rgb)
	__ret := C.nk_rgb_hex(crgb)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgba function as declared in nk/nuklear.h:983
func NkRgba(r int32, g int32, b int32, a int32) Color {
	cr, _ := (C.int)(r), cgoAllocsUnknown
	cg, _ := (C.int)(g), cgoAllocsUnknown
	cb, _ := (C.int)(b), cgoAllocsUnknown
	ca, _ := (C.int)(a), cgoAllocsUnknown
	__ret := C.nk_rgba(cr, cg, cb, ca)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaU32 function as declared in nk/nuklear.h:984
func NkRgbaU32(arg0 Uint) Color {
	carg0, _ := (C.nk_uint)(arg0), cgoAllocsUnknown
	__ret := C.nk_rgba_u32(carg0)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaIv function as declared in nk/nuklear.h:985
func NkRgbaIv(rgba []int32) Color {
	crgba, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rgba)).Data)), cgoAllocsUnknown
	__ret := C.nk_rgba_iv(crgba)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaF function as declared in nk/nuklear.h:987
func NkRgbaF(r float32, g float32, b float32, a float32) Color {
	cr, _ := (C.float)(r), cgoAllocsUnknown
	cg, _ := (C.float)(g), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	ca, _ := (C.float)(a), cgoAllocsUnknown
	__ret := C.nk_rgba_f(cr, cg, cb, ca)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaFv function as declared in nk/nuklear.h:988
func NkRgbaFv(rgba []float32) Color {
	crgba, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rgba)).Data)), cgoAllocsUnknown
	__ret := C.nk_rgba_fv(crgba)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaHex function as declared in nk/nuklear.h:989
func NkRgbaHex(rgb string) Color {
	crgb, _ := unpackPCharString(rgb)
	__ret := C.nk_rgba_hex(crgb)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsv function as declared in nk/nuklear.h:991
func NkHsv(h int32, s int32, v int32) Color {
	ch, _ := (C.int)(h), cgoAllocsUnknown
	cs, _ := (C.int)(s), cgoAllocsUnknown
	cv, _ := (C.int)(v), cgoAllocsUnknown
	__ret := C.nk_hsv(ch, cs, cv)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvIv function as declared in nk/nuklear.h:992
func NkHsvIv(hsv []int32) Color {
	chsv, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsv)).Data)), cgoAllocsUnknown
	__ret := C.nk_hsv_iv(chsv)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvF function as declared in nk/nuklear.h:994
func NkHsvF(h float32, s float32, v float32) Color {
	ch, _ := (C.float)(h), cgoAllocsUnknown
	cs, _ := (C.float)(s), cgoAllocsUnknown
	cv, _ := (C.float)(v), cgoAllocsUnknown
	__ret := C.nk_hsv_f(ch, cs, cv)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvFv function as declared in nk/nuklear.h:995
func NkHsvFv(hsv []float32) Color {
	chsv, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsv)).Data)), cgoAllocsUnknown
	__ret := C.nk_hsv_fv(chsv)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsva function as declared in nk/nuklear.h:997
func NkHsva(h int32, s int32, v int32, a int32) Color {
	ch, _ := (C.int)(h), cgoAllocsUnknown
	cs, _ := (C.int)(s), cgoAllocsUnknown
	cv, _ := (C.int)(v), cgoAllocsUnknown
	ca, _ := (C.int)(a), cgoAllocsUnknown
	__ret := C.nk_hsva(ch, cs, cv, ca)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaIv function as declared in nk/nuklear.h:998
func NkHsvaIv(hsva []int32) Color {
	chsva, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsva)).Data)), cgoAllocsUnknown
	__ret := C.nk_hsva_iv(chsva)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaF function as declared in nk/nuklear.h:1000
func NkHsvaF(h float32, s float32, v float32, a float32) Color {
	ch, _ := (C.float)(h), cgoAllocsUnknown
	cs, _ := (C.float)(s), cgoAllocsUnknown
	cv, _ := (C.float)(v), cgoAllocsUnknown
	ca, _ := (C.float)(a), cgoAllocsUnknown
	__ret := C.nk_hsva_f(ch, cs, cv, ca)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaFv function as declared in nk/nuklear.h:1001
func NkHsvaFv(hsva []float32) Color {
	chsva, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsva)).Data)), cgoAllocsUnknown
	__ret := C.nk_hsva_fv(chsva)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// NkColorF function as declared in nk/nuklear.h:1004
func NkColorF(r []float32, g []float32, b []float32, a []float32, arg4 Color) {
	cr, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	cg, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&g)).Data)), cgoAllocsUnknown
	cb, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	ca, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	C.nk_color_f(cr, cg, cb, ca, carg4)
}

// NkColorFv function as declared in nk/nuklear.h:1005
func NkColorFv(rgbaOut []float32, arg1 Color) {
	crgbaOut, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rgbaOut)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_fv(crgbaOut, carg1)
}

// NkColorD function as declared in nk/nuklear.h:1006
func NkColorD(r []float64, g []float64, b []float64, a []float64, arg4 Color) {
	cr, _ := (*C.double)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&r)).Data)), cgoAllocsUnknown
	cg, _ := (*C.double)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&g)).Data)), cgoAllocsUnknown
	cb, _ := (*C.double)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	ca, _ := (*C.double)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	C.nk_color_d(cr, cg, cb, ca, carg4)
}

// NkColorDv function as declared in nk/nuklear.h:1007
func NkColorDv(rgbaOut []float64, arg1 Color) {
	crgbaOut, _ := (*C.double)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rgbaOut)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_dv(crgbaOut, carg1)
}

// NkColorU32 function as declared in nk/nuklear.h:1009
func NkColorU32(arg0 Color) Uint {
	carg0, _ := arg0.PassValue()
	__ret := C.nk_color_u32(carg0)
	__v := (Uint)(__ret)
	return __v
}

// NkColorHexRgba function as declared in nk/nuklear.h:1010
func NkColorHexRgba(output []byte, arg1 Color) {
	coutput, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&output)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_hex_rgba(coutput, carg1)
}

// NkColorHexRgb function as declared in nk/nuklear.h:1011
func NkColorHexRgb(output []byte, arg1 Color) {
	coutput, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&output)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_hex_rgb(coutput, carg1)
}

// NkColorHsvI function as declared in nk/nuklear.h:1013
func NkColorHsvI(outH []int32, outS []int32, outV []int32, arg3 Color) {
	coutH, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outH)).Data)), cgoAllocsUnknown
	coutS, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outS)).Data)), cgoAllocsUnknown
	coutV, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outV)).Data)), cgoAllocsUnknown
	carg3, _ := arg3.PassValue()
	C.nk_color_hsv_i(coutH, coutS, coutV, carg3)
}

// NkColorHsvIv function as declared in nk/nuklear.h:1015
func NkColorHsvIv(hsvOut []int32, arg1 Color) {
	chsvOut, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsvOut)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_hsv_iv(chsvOut, carg1)
}

// NkColorHsvF function as declared in nk/nuklear.h:1017
func NkColorHsvF(outH []float32, outS []float32, outV []float32, arg3 Color) {
	coutH, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outH)).Data)), cgoAllocsUnknown
	coutS, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outS)).Data)), cgoAllocsUnknown
	coutV, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outV)).Data)), cgoAllocsUnknown
	carg3, _ := arg3.PassValue()
	C.nk_color_hsv_f(coutH, coutS, coutV, carg3)
}

// NkColorHsvFv function as declared in nk/nuklear.h:1018
func NkColorHsvFv(hsvOut []float32, arg1 Color) {
	chsvOut, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsvOut)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_hsv_fv(chsvOut, carg1)
}

// NkColorHsvaI function as declared in nk/nuklear.h:1020
func NkColorHsvaI(h []int32, s []int32, v []int32, a []int32, arg4 Color) {
	ch, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&h)).Data)), cgoAllocsUnknown
	cs, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&s)).Data)), cgoAllocsUnknown
	cv, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	ca, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	C.nk_color_hsva_i(ch, cs, cv, ca, carg4)
}

// NkColorHsvaIv function as declared in nk/nuklear.h:1022
func NkColorHsvaIv(hsvaOut []int32, arg1 Color) {
	chsvaOut, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsvaOut)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_hsva_iv(chsvaOut, carg1)
}

// NkColorHsvaF function as declared in nk/nuklear.h:1024
func NkColorHsvaF(outH []float32, outS []float32, outV []float32, outA []float32, arg4 Color) {
	coutH, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outH)).Data)), cgoAllocsUnknown
	coutS, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outS)).Data)), cgoAllocsUnknown
	coutV, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outV)).Data)), cgoAllocsUnknown
	coutA, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outA)).Data)), cgoAllocsUnknown
	carg4, _ := arg4.PassValue()
	C.nk_color_hsva_f(coutH, coutS, coutV, coutA, carg4)
}

// NkColorHsvaFv function as declared in nk/nuklear.h:1025
func NkColorHsvaFv(hsvaOut []float32, arg1 Color) {
	chsvaOut, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&hsvaOut)).Data)), cgoAllocsUnknown
	carg1, _ := arg1.PassValue()
	C.nk_color_hsva_fv(chsvaOut, carg1)
}

// NkHandlePtr function as declared in nk/nuklear.h:1028
func NkHandlePtr(arg0 unsafe.Pointer) Handle {
	carg0, _ := (unsafe.Pointer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_handle_ptr(carg0)
	__v := *(*Handle)(unsafe.Pointer(&__ret))
	return __v
}

// NkHandleId function as declared in nk/nuklear.h:1029
func NkHandleId(arg0 int32) Handle {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	__ret := C.nk_handle_id(carg0)
	__v := *(*Handle)(unsafe.Pointer(&__ret))
	return __v
}

// NkImageHandle function as declared in nk/nuklear.h:1030
func NkImageHandle(arg0 Handle) Image {
	carg0, _ := *(*C.nk_handle)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	__ret := C.nk_image_handle(carg0)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// NkImagePtr function as declared in nk/nuklear.h:1031
func NkImagePtr(arg0 unsafe.Pointer) Image {
	carg0, _ := (unsafe.Pointer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_image_ptr(carg0)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// NkImageId function as declared in nk/nuklear.h:1032
func NkImageId(arg0 int32) Image {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	__ret := C.nk_image_id(carg0)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// NkImageIsSubimage function as declared in nk/nuklear.h:1033
func NkImageIsSubimage(img []Image) int32 {
	cimg, _ := unpackArgSImage(img)
	__ret := C.nk_image_is_subimage(cimg)
	packSImage(img, cimg)
	__v := (int32)(__ret)
	return __v
}

// NkSubimagePtr function as declared in nk/nuklear.h:1034
func NkSubimagePtr(arg0 unsafe.Pointer, w uint16, h uint16, subRegion Rect) Image {
	carg0, _ := (unsafe.Pointer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cw, _ := (C.ushort)(w), cgoAllocsUnknown
	ch, _ := (C.ushort)(h), cgoAllocsUnknown
	csubRegion, _ := subRegion.PassValue()
	__ret := C.nk_subimage_ptr(carg0, cw, ch, csubRegion)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// NkSubimageId function as declared in nk/nuklear.h:1035
func NkSubimageId(arg0 int32, w uint16, h uint16, subRegion Rect) Image {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	cw, _ := (C.ushort)(w), cgoAllocsUnknown
	ch, _ := (C.ushort)(h), cgoAllocsUnknown
	csubRegion, _ := subRegion.PassValue()
	__ret := C.nk_subimage_id(carg0, cw, ch, csubRegion)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// NkSubimageHandle function as declared in nk/nuklear.h:1036
func NkSubimageHandle(arg0 Handle, w uint16, h uint16, subRegion Rect) Image {
	carg0, _ := *(*C.nk_handle)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	cw, _ := (C.ushort)(w), cgoAllocsUnknown
	ch, _ := (C.ushort)(h), cgoAllocsUnknown
	csubRegion, _ := subRegion.PassValue()
	__ret := C.nk_subimage_handle(carg0, cw, ch, csubRegion)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// NkMurmurHash function as declared in nk/nuklear.h:1039
func NkMurmurHash(key unsafe.Pointer, len int32, seed Hash) Hash {
	ckey, _ := (unsafe.Pointer)(unsafe.Pointer(key)), cgoAllocsUnknown
	clen, _ := (C.int)(len), cgoAllocsUnknown
	cseed, _ := (C.nk_hash)(seed), cgoAllocsUnknown
	__ret := C.nk_murmur_hash(ckey, clen, cseed)
	__v := (Hash)(__ret)
	return __v
}

// NkTriangleFromDirection function as declared in nk/nuklear.h:1040
func NkTriangleFromDirection(result []Vec2, r Rect, padX float32, padY float32, arg4 Heading) {
	cresult, _ := unpackArgSVec2(result)
	cr, _ := r.PassValue()
	cpadX, _ := (C.float)(padX), cgoAllocsUnknown
	cpadY, _ := (C.float)(padY), cgoAllocsUnknown
	carg4, _ := (C.enum_nk_heading)(arg4), cgoAllocsUnknown
	C.nk_triangle_from_direction(cresult, cr, cpadX, cpadY, carg4)
	packSVec2(result, cresult)
}

// NkVec2 function as declared in nk/nuklear.h:1042
func NkVec2(x float32, y float32) Vec2 {
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	__ret := C.nk_vec2(cx, cy)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkVec2i function as declared in nk/nuklear.h:1043
func NkVec2i(x int32, y int32) Vec2 {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	__ret := C.nk_vec2i(cx, cy)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkVec2v function as declared in nk/nuklear.h:1044
func NkVec2v(xy []float32) Vec2 {
	cxy, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xy)).Data)), cgoAllocsUnknown
	__ret := C.nk_vec2v(cxy)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkVec2iv function as declared in nk/nuklear.h:1045
func NkVec2iv(xy []int32) Vec2 {
	cxy, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xy)).Data)), cgoAllocsUnknown
	__ret := C.nk_vec2iv(cxy)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkGetNullRect function as declared in nk/nuklear.h:1047
func NkGetNullRect() Rect {
	__ret := C.nk_get_null_rect()
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRect function as declared in nk/nuklear.h:1048
func NkRect(x float32, y float32, w float32, h float32) Rect {
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	cw, _ := (C.float)(w), cgoAllocsUnknown
	ch, _ := (C.float)(h), cgoAllocsUnknown
	__ret := C.nk_rect(cx, cy, cw, ch)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRecti function as declared in nk/nuklear.h:1049
func NkRecti(x int32, y int32, w int32, h int32) Rect {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cw, _ := (C.int)(w), cgoAllocsUnknown
	ch, _ := (C.int)(h), cgoAllocsUnknown
	__ret := C.nk_recti(cx, cy, cw, ch)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRecta function as declared in nk/nuklear.h:1050
func NkRecta(pos Vec2, size Vec2) Rect {
	cpos, _ := pos.PassValue()
	csize, _ := size.PassValue()
	__ret := C.nk_recta(cpos, csize)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRectv function as declared in nk/nuklear.h:1051
func NkRectv(xywh []float32) Rect {
	cxywh, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xywh)).Data)), cgoAllocsUnknown
	__ret := C.nk_rectv(cxywh)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRectiv function as declared in nk/nuklear.h:1052
func NkRectiv(xywh []int32) Rect {
	cxywh, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&xywh)).Data)), cgoAllocsUnknown
	__ret := C.nk_rectiv(cxywh)
	__v := *NewRectRef(unsafe.Pointer(&__ret))
	return __v
}

// NkRectPos function as declared in nk/nuklear.h:1053
func NkRectPos(arg0 Rect) Vec2 {
	carg0, _ := arg0.PassValue()
	__ret := C.nk_rect_pos(carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkRectSize function as declared in nk/nuklear.h:1054
func NkRectSize(arg0 Rect) Vec2 {
	carg0, _ := arg0.PassValue()
	__ret := C.nk_rect_size(carg0)
	__v := *NewVec2Ref(unsafe.Pointer(&__ret))
	return __v
}

// NkUtfDecode function as declared in nk/nuklear.h:1068
func NkUtfDecode(arg0 string, arg1 []Rune, arg2 int32) int32 {
	carg0, _ := unpackPCharString(arg0)
	carg1, _ := (*C.nk_rune)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_utf_decode(carg0, carg1, carg2)
	__v := (int32)(__ret)
	return __v
}

// NkUtfEncode function as declared in nk/nuklear.h:1069
func NkUtfEncode(arg0 Rune, arg1 []byte, arg2 int32) int32 {
	carg0, _ := (C.nk_rune)(arg0), cgoAllocsUnknown
	carg1, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	carg2, _ := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_utf_encode(carg0, carg1, carg2)
	__v := (int32)(__ret)
	return __v
}

// NkUtfLen function as declared in nk/nuklear.h:1070
func NkUtfLen(arg0 string, byteLen int32) int32 {
	carg0, _ := unpackPCharString(arg0)
	cbyteLen, _ := (C.int)(byteLen), cgoAllocsUnknown
	__ret := C.nk_utf_len(carg0, cbyteLen)
	__v := (int32)(__ret)
	return __v
}

// NkUtfAt function as declared in nk/nuklear.h:1071
func NkUtfAt(buffer string, length int32, index int32, unicode []Rune, len []int32) string {
	cbuffer, _ := unpackPCharString(buffer)
	clength, _ := (C.int)(length), cgoAllocsUnknown
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	cunicode, _ := (*C.nk_rune)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&unicode)).Data)), cgoAllocsUnknown
	clen, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&len)).Data)), cgoAllocsUnknown
	__ret := C.nk_utf_at(cbuffer, clength, cindex, cunicode, clen)
	__v := packPCharString(__ret)
	return __v
}

// NkBufferInit function as declared in nk/nuklear.h:1156
func NkBufferInit(arg0 []Buffer, arg1 []Allocator, size Size) {
	carg0, _ := unpackArgSBuffer(arg0)
	carg1, _ := (*C.struct_nk_allocator)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	csize, _ := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_buffer_init(carg0, carg1, csize)
	packSBuffer(arg0, carg0)
}

// NkBufferInitFixed function as declared in nk/nuklear.h:1157
func NkBufferInitFixed(arg0 []Buffer, memory unsafe.Pointer, size Size) {
	carg0, _ := unpackArgSBuffer(arg0)
	cmemory, _ := (unsafe.Pointer)(unsafe.Pointer(memory)), cgoAllocsUnknown
	csize, _ := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_buffer_init_fixed(carg0, cmemory, csize)
	packSBuffer(arg0, carg0)
}

// NkBufferInfo function as declared in nk/nuklear.h:1158
func NkBufferInfo(arg0 []MemoryStatus, arg1 []Buffer) {
	carg0, _ := unpackArgSMemoryStatus(arg0)
	carg1, _ := unpackArgSBuffer(arg1)
	C.nk_buffer_info(carg0, carg1)
	packSBuffer(arg1, carg1)
	packSMemoryStatus(arg0, carg0)
}

// NkBufferPush function as declared in nk/nuklear.h:1159
func NkBufferPush(arg0 []Buffer, kind BufferAllocationType, memory unsafe.Pointer, size Size, align Size) {
	carg0, _ := unpackArgSBuffer(arg0)
	ckind, _ := (C.enum_nk_buffer_allocation_type)(kind), cgoAllocsUnknown
	cmemory, _ := (unsafe.Pointer)(unsafe.Pointer(memory)), cgoAllocsUnknown
	csize, _ := (C.nk_size)(size), cgoAllocsUnknown
	calign, _ := (C.nk_size)(align), cgoAllocsUnknown
	C.nk_buffer_push(carg0, ckind, cmemory, csize, calign)
	packSBuffer(arg0, carg0)
}

// NkBufferMark function as declared in nk/nuklear.h:1160
func NkBufferMark(arg0 []Buffer, kind BufferAllocationType) {
	carg0, _ := unpackArgSBuffer(arg0)
	ckind, _ := (C.enum_nk_buffer_allocation_type)(kind), cgoAllocsUnknown
	C.nk_buffer_mark(carg0, ckind)
	packSBuffer(arg0, carg0)
}

// NkBufferReset function as declared in nk/nuklear.h:1161
func NkBufferReset(arg0 []Buffer, kind BufferAllocationType) {
	carg0, _ := unpackArgSBuffer(arg0)
	ckind, _ := (C.enum_nk_buffer_allocation_type)(kind), cgoAllocsUnknown
	C.nk_buffer_reset(carg0, ckind)
	packSBuffer(arg0, carg0)
}

// NkBufferClear function as declared in nk/nuklear.h:1162
func NkBufferClear(arg0 []Buffer) {
	carg0, _ := unpackArgSBuffer(arg0)
	C.nk_buffer_clear(carg0)
	packSBuffer(arg0, carg0)
}

// NkBufferFree function as declared in nk/nuklear.h:1163
func NkBufferFree(arg0 []Buffer) {
	carg0, _ := unpackArgSBuffer(arg0)
	C.nk_buffer_free(carg0)
	packSBuffer(arg0, carg0)
}

// NkBufferMemory function as declared in nk/nuklear.h:1164
func NkBufferMemory(arg0 []Buffer) unsafe.Pointer {
	carg0, _ := unpackArgSBuffer(arg0)
	__ret := C.nk_buffer_memory(carg0)
	packSBuffer(arg0, carg0)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// NkBufferMemoryConst function as declared in nk/nuklear.h:1165
func NkBufferMemoryConst(arg0 []Buffer) unsafe.Pointer {
	carg0, _ := unpackArgSBuffer(arg0)
	__ret := C.nk_buffer_memory_const(carg0)
	packSBuffer(arg0, carg0)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// NkBufferTotal function as declared in nk/nuklear.h:1166
func NkBufferTotal(arg0 []Buffer) Size {
	carg0, _ := unpackArgSBuffer(arg0)
	__ret := C.nk_buffer_total(carg0)
	packSBuffer(arg0, carg0)
	__v := (Size)(__ret)
	return __v
}

// NkFilterDefault function as declared in nk/nuklear.h:1313
func NkFilterDefault(arg0 []TextEdit, unicode Rune) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	cunicode, _ := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_default(carg0, cunicode)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkFilterAscii function as declared in nk/nuklear.h:1314
func NkFilterAscii(arg0 []TextEdit, unicode Rune) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	cunicode, _ := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_ascii(carg0, cunicode)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkFilterFloat function as declared in nk/nuklear.h:1315
func NkFilterFloat(arg0 []TextEdit, unicode Rune) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	cunicode, _ := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_float(carg0, cunicode)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkFilterDecimal function as declared in nk/nuklear.h:1316
func NkFilterDecimal(arg0 []TextEdit, unicode Rune) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	cunicode, _ := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_decimal(carg0, cunicode)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkFilterHex function as declared in nk/nuklear.h:1317
func NkFilterHex(arg0 []TextEdit, unicode Rune) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	cunicode, _ := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_hex(carg0, cunicode)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkFilterOct function as declared in nk/nuklear.h:1318
func NkFilterOct(arg0 []TextEdit, unicode Rune) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	cunicode, _ := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_oct(carg0, cunicode)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkFilterBinary function as declared in nk/nuklear.h:1319
func NkFilterBinary(arg0 []TextEdit, unicode Rune) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	cunicode, _ := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_binary(carg0, cunicode)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkTexteditInit function as declared in nk/nuklear.h:1325
func NkTexteditInit(arg0 []TextEdit, arg1 []Allocator, size Size) {
	carg0, _ := unpackArgSTextEdit(arg0)
	carg1, _ := (*C.struct_nk_allocator)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	csize, _ := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_textedit_init(carg0, carg1, csize)
	packSTextEdit(arg0, carg0)
}

// NkTexteditInitFixed function as declared in nk/nuklear.h:1326
func NkTexteditInitFixed(arg0 []TextEdit, memory unsafe.Pointer, size Size) {
	carg0, _ := unpackArgSTextEdit(arg0)
	cmemory, _ := (unsafe.Pointer)(unsafe.Pointer(memory)), cgoAllocsUnknown
	csize, _ := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_textedit_init_fixed(carg0, cmemory, csize)
	packSTextEdit(arg0, carg0)
}

// NkTexteditFree function as declared in nk/nuklear.h:1327
func NkTexteditFree(arg0 []TextEdit) {
	carg0, _ := unpackArgSTextEdit(arg0)
	C.nk_textedit_free(carg0)
	packSTextEdit(arg0, carg0)
}

// NkTexteditText function as declared in nk/nuklear.h:1328
func NkTexteditText(arg0 []TextEdit, arg1 string, totalLen int32) {
	carg0, _ := unpackArgSTextEdit(arg0)
	carg1, _ := unpackPCharString(arg1)
	ctotalLen, _ := (C.int)(totalLen), cgoAllocsUnknown
	C.nk_textedit_text(carg0, carg1, ctotalLen)
	packSTextEdit(arg0, carg0)
}

// NkTexteditDelete function as declared in nk/nuklear.h:1329
func NkTexteditDelete(arg0 []TextEdit, where int32, len int32) {
	carg0, _ := unpackArgSTextEdit(arg0)
	cwhere, _ := (C.int)(where), cgoAllocsUnknown
	clen, _ := (C.int)(len), cgoAllocsUnknown
	C.nk_textedit_delete(carg0, cwhere, clen)
	packSTextEdit(arg0, carg0)
}

// NkTexteditDeleteSelection function as declared in nk/nuklear.h:1330
func NkTexteditDeleteSelection(arg0 []TextEdit) {
	carg0, _ := unpackArgSTextEdit(arg0)
	C.nk_textedit_delete_selection(carg0)
	packSTextEdit(arg0, carg0)
}

// NkTexteditSelectAll function as declared in nk/nuklear.h:1331
func NkTexteditSelectAll(arg0 []TextEdit) {
	carg0, _ := unpackArgSTextEdit(arg0)
	C.nk_textedit_select_all(carg0)
	packSTextEdit(arg0, carg0)
}

// NkTexteditCut function as declared in nk/nuklear.h:1332
func NkTexteditCut(arg0 []TextEdit) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	__ret := C.nk_textedit_cut(carg0)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkTexteditPaste function as declared in nk/nuklear.h:1333
func NkTexteditPaste(arg0 []TextEdit, arg1 string, len int32) int32 {
	carg0, _ := unpackArgSTextEdit(arg0)
	carg1, _ := unpackPCharString(arg1)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	__ret := C.nk_textedit_paste(carg0, carg1, clen)
	packSTextEdit(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkTexteditUndo function as declared in nk/nuklear.h:1334
func NkTexteditUndo(arg0 []TextEdit) {
	carg0, _ := unpackArgSTextEdit(arg0)
	C.nk_textedit_undo(carg0)
	packSTextEdit(arg0, carg0)
}

// NkTexteditRedo function as declared in nk/nuklear.h:1335
func NkTexteditRedo(arg0 []TextEdit) {
	carg0, _ := unpackArgSTextEdit(arg0)
	C.nk_textedit_redo(carg0)
	packSTextEdit(arg0, carg0)
}

// NkFillRect function as declared in nk/nuklear.h:1755
func NkFillRect(arg0 []CommandBuffer, arg1 Rect, rounding float32, arg3 Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	carg1, _ := arg1.PassValue()
	crounding, _ := (C.float)(rounding), cgoAllocsUnknown
	carg3, _ := arg3.PassValue()
	C.nk_fill_rect(carg0, carg1, crounding, carg3)
	packSCommandBuffer(arg0, carg0)
}

// NkFillRectMultiColor function as declared in nk/nuklear.h:1756
func NkFillRectMultiColor(arg0 []CommandBuffer, arg1 Rect, left Color, top Color, right Color, bottom Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	carg1, _ := arg1.PassValue()
	cleft, _ := left.PassValue()
	ctop, _ := top.PassValue()
	cright, _ := right.PassValue()
	cbottom, _ := bottom.PassValue()
	C.nk_fill_rect_multi_color(carg0, carg1, cleft, ctop, cright, cbottom)
	packSCommandBuffer(arg0, carg0)
}

// NkFillCircle function as declared in nk/nuklear.h:1757
func NkFillCircle(arg0 []CommandBuffer, arg1 Rect, arg2 Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := arg2.PassValue()
	C.nk_fill_circle(carg0, carg1, carg2)
	packSCommandBuffer(arg0, carg0)
}

// NkFillArc function as declared in nk/nuklear.h:1758
func NkFillArc(arg0 []CommandBuffer, cx float32, cy float32, radius float32, aMin float32, aMax float32, arg6 Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	ccx, _ := (C.float)(cx), cgoAllocsUnknown
	ccy, _ := (C.float)(cy), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	caMin, _ := (C.float)(aMin), cgoAllocsUnknown
	caMax, _ := (C.float)(aMax), cgoAllocsUnknown
	carg6, _ := arg6.PassValue()
	C.nk_fill_arc(carg0, ccx, ccy, cradius, caMin, caMax, carg6)
	packSCommandBuffer(arg0, carg0)
}

// NkFillTriangle function as declared in nk/nuklear.h:1759
func NkFillTriangle(arg0 []CommandBuffer, x0 float32, y0 float32, x1 float32, y1 float32, x2 float32, y2 float32, arg7 Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	cx0, _ := (C.float)(x0), cgoAllocsUnknown
	cy0, _ := (C.float)(y0), cgoAllocsUnknown
	cx1, _ := (C.float)(x1), cgoAllocsUnknown
	cy1, _ := (C.float)(y1), cgoAllocsUnknown
	cx2, _ := (C.float)(x2), cgoAllocsUnknown
	cy2, _ := (C.float)(y2), cgoAllocsUnknown
	carg7, _ := arg7.PassValue()
	C.nk_fill_triangle(carg0, cx0, cy0, cx1, cy1, cx2, cy2, carg7)
	packSCommandBuffer(arg0, carg0)
}

// NkFillPolygon function as declared in nk/nuklear.h:1760
func NkFillPolygon(arg0 []CommandBuffer, arg1 []float32, pointCount int32, arg3 Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	carg1, _ := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&arg1)).Data)), cgoAllocsUnknown
	cpointCount, _ := (C.int)(pointCount), cgoAllocsUnknown
	carg3, _ := arg3.PassValue()
	C.nk_fill_polygon(carg0, carg1, cpointCount, carg3)
	packSCommandBuffer(arg0, carg0)
}

// NkPushScissor function as declared in nk/nuklear.h:1763
func NkPushScissor(arg0 []CommandBuffer, arg1 Rect) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	carg1, _ := arg1.PassValue()
	C.nk_push_scissor(carg0, carg1)
	packSCommandBuffer(arg0, carg0)
}

// NkDrawImage function as declared in nk/nuklear.h:1764
func NkDrawImage(arg0 []CommandBuffer, arg1 Rect, arg2 []Image, arg3 Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	carg1, _ := arg1.PassValue()
	carg2, _ := unpackArgSImage(arg2)
	carg3, _ := arg3.PassValue()
	C.nk_draw_image(carg0, carg1, carg2, carg3)
	packSImage(arg2, carg2)
	packSCommandBuffer(arg0, carg0)
}

// NkDrawText function as declared in nk/nuklear.h:1765
func NkDrawText(arg0 []CommandBuffer, arg1 Rect, text string, len int32, arg4 []UserFont, arg5 Color, arg6 Color) {
	carg0, _ := unpackArgSCommandBuffer(arg0)
	carg1, _ := arg1.PassValue()
	ctext, _ := unpackPCharString(text)
	clen, _ := (C.int)(len), cgoAllocsUnknown
	carg4, _ := unpackArgSUserFont(arg4)
	carg5, _ := arg5.PassValue()
	carg6, _ := arg6.PassValue()
	C.nk_draw_text(carg0, carg1, ctext, clen, carg4, carg5, carg6)
	packSUserFont(arg4, carg4)
	packSCommandBuffer(arg0, carg0)
}

// Nk_Next function as declared in nk/nuklear.h:1766
func Nk_Next(arg0 []Context, arg1 []Command) *Command {
	carg0, _ := unpackArgSContext(arg0)
	carg1, _ := unpackArgSCommand(arg1)
	__ret := C.nk__next(carg0, carg1)
	packSCommand(arg1, carg1)
	packSContext(arg0, carg0)
	__v := NewCommandRef(unsafe.Pointer(__ret))
	return __v
}

// Nk_Begin function as declared in nk/nuklear.h:1767
func Nk_Begin(arg0 []Context) *Command {
	carg0, _ := unpackArgSContext(arg0)
	__ret := C.nk__begin(carg0)
	packSContext(arg0, carg0)
	__v := NewCommandRef(unsafe.Pointer(__ret))
	return __v
}

// NkInputHasMouseClick function as declared in nk/nuklear.h:1807
func NkInputHasMouseClick(arg0 []Input, arg1 Buttons) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_has_mouse_click(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputHasMouseClickInRect function as declared in nk/nuklear.h:1808
func NkInputHasMouseClickInRect(arg0 []Input, arg1 Buttons, arg2 Rect) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	carg2, _ := arg2.PassValue()
	__ret := C.nk_input_has_mouse_click_in_rect(carg0, carg1, carg2)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputHasMouseClickDownInRect function as declared in nk/nuklear.h:1809
func NkInputHasMouseClickDownInRect(arg0 []Input, arg1 Buttons, arg2 Rect, down int32) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	carg2, _ := arg2.PassValue()
	cdown, _ := (C.int)(down), cgoAllocsUnknown
	__ret := C.nk_input_has_mouse_click_down_in_rect(carg0, carg1, carg2, cdown)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsMouseClickInRect function as declared in nk/nuklear.h:1810
func NkInputIsMouseClickInRect(arg0 []Input, arg1 Buttons, arg2 Rect) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	carg2, _ := arg2.PassValue()
	__ret := C.nk_input_is_mouse_click_in_rect(carg0, carg1, carg2)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsMouseClickDownInRect function as declared in nk/nuklear.h:1811
func NkInputIsMouseClickDownInRect(i []Input, id Buttons, b Rect, down int32) int32 {
	ci, _ := unpackArgSInput(i)
	cid, _ := (C.enum_nk_buttons)(id), cgoAllocsUnknown
	cb, _ := b.PassValue()
	cdown, _ := (C.int)(down), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_click_down_in_rect(ci, cid, cb, cdown)
	packSInput(i, ci)
	__v := (int32)(__ret)
	return __v
}

// NkInputAnyMouseClickInRect function as declared in nk/nuklear.h:1812
func NkInputAnyMouseClickInRect(arg0 []Input, arg1 Rect) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_input_any_mouse_click_in_rect(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsMousePrevHoveringRect function as declared in nk/nuklear.h:1813
func NkInputIsMousePrevHoveringRect(arg0 []Input, arg1 Rect) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_input_is_mouse_prev_hovering_rect(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsMouseHoveringRect function as declared in nk/nuklear.h:1814
func NkInputIsMouseHoveringRect(arg0 []Input, arg1 Rect) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := arg1.PassValue()
	__ret := C.nk_input_is_mouse_hovering_rect(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputMouseClicked function as declared in nk/nuklear.h:1815
func NkInputMouseClicked(arg0 []Input, arg1 Buttons, arg2 Rect) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	carg2, _ := arg2.PassValue()
	__ret := C.nk_input_mouse_clicked(carg0, carg1, carg2)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsMouseDown function as declared in nk/nuklear.h:1816
func NkInputIsMouseDown(arg0 []Input, arg1 Buttons) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_down(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsMousePressed function as declared in nk/nuklear.h:1817
func NkInputIsMousePressed(arg0 []Input, arg1 Buttons) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_pressed(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsMouseReleased function as declared in nk/nuklear.h:1818
func NkInputIsMouseReleased(arg0 []Input, arg1 Buttons) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_buttons)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_released(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsKeyPressed function as declared in nk/nuklear.h:1819
func NkInputIsKeyPressed(arg0 []Input, arg1 Keys) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_keys)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_key_pressed(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsKeyReleased function as declared in nk/nuklear.h:1820
func NkInputIsKeyReleased(arg0 []Input, arg1 Keys) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_keys)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_key_released(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkInputIsKeyDown function as declared in nk/nuklear.h:1821
func NkInputIsKeyDown(arg0 []Input, arg1 Keys) int32 {
	carg0, _ := unpackArgSInput(arg0)
	carg1, _ := (C.enum_nk_keys)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_key_down(carg0, carg1)
	packSInput(arg0, carg0)
	__v := (int32)(__ret)
	return __v
}

// NkStyleItemImage function as declared in nk/nuklear.h:2406
func NkStyleItemImage(img Image) StyleItem {
	cimg, _ := img.PassValue()
	__ret := C.nk_style_item_image(cimg)
	__v := *NewStyleItemRef(unsafe.Pointer(&__ret))
	return __v
}

// NkStyleItemColor function as declared in nk/nuklear.h:2407
func NkStyleItemColor(arg0 Color) StyleItem {
	carg0, _ := arg0.PassValue()
	__ret := C.nk_style_item_color(carg0)
	__v := *NewStyleItemRef(unsafe.Pointer(&__ret))
	return __v
}

// NkStyleItemHide function as declared in nk/nuklear.h:2408
func NkStyleItemHide() StyleItem {
	__ret := C.nk_style_item_hide()
	__v := *NewStyleItemRef(unsafe.Pointer(&__ret))
	return __v
}
